/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4
 * Contact: support@sajari.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SendEventRequest A request to send an event to the ranking system after a user interacts with a search result.
type SendEventRequest struct {
	// The name of event, e.g. `click`, `purchase`.
	Name string `json:"name"`
	// The token corresponding to the search result that was interacted with, e.g. `eyJ...`.
	Token string `json:"token"`
	// The weight assigned to the event.  Generally a sensible weight is 1. If you want to weight an event in a certain way you can use a value other than 1. For example, if you want to capture profit in an event, you could set the weight to a value that represents the profit.
	Weight *int32 `json:"weight,omitempty"`
	// An object made up of field-value pairs that contains additional metadata to record with the event.  Every value in the object must be one of the following primitive types:  - boolean - number - string
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
}

// NewSendEventRequest instantiates a new SendEventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendEventRequest(name string, token string) *SendEventRequest {
	this := SendEventRequest{}
	this.Name = name
	this.Token = token
	return &this
}

// NewSendEventRequestWithDefaults instantiates a new SendEventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendEventRequestWithDefaults() *SendEventRequest {
	this := SendEventRequest{}
	return &this
}

// GetName returns the Name field value
func (o *SendEventRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SendEventRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SendEventRequest) SetName(v string) {
	o.Name = v
}

// GetToken returns the Token field value
func (o *SendEventRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *SendEventRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *SendEventRequest) SetToken(v string) {
	o.Token = v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *SendEventRequest) GetWeight() int32 {
	if o == nil || o.Weight == nil {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEventRequest) GetWeightOk() (*int32, bool) {
	if o == nil || o.Weight == nil {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *SendEventRequest) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *SendEventRequest) SetWeight(v int32) {
	o.Weight = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SendEventRequest) GetMetadata() map[string]map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEventRequest) GetMetadataOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SendEventRequest) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]map[string]interface{} and assigns it to the Metadata field.
func (o *SendEventRequest) SetMetadata(v map[string]map[string]interface{}) {
	o.Metadata = &v
}

func (o SendEventRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["token"] = o.Token
	}
	if o.Weight != nil {
		toSerialize["weight"] = o.Weight
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableSendEventRequest struct {
	value *SendEventRequest
	isSet bool
}

func (v NullableSendEventRequest) Get() *SendEventRequest {
	return v.value
}

func (v *NullableSendEventRequest) Set(val *SendEventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendEventRequest(val *SendEventRequest) *NullableSendEventRequest {
	return &NullableSendEventRequest{value: val, isSet: true}
}

func (v NullableSendEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
