openapi: 3.0.0
info:
  contact:
    email: support@search.io
    name: API Support
    url: https://www.search.io/company/contact
  description: Search.io is a smart, highly-configurable, real-time search service
    that enables thousands of businesses worldwide to provide amazing search experiences
    on their websites, stores, and applications.
  termsOfService: https://www.search.io/terms
  title: Search.io API
  version: v4
  x-logo:
    altText: Search.io
    url: https://cdn.search.io/v2/img/search-io-wordmark-light.svg
externalDocs:
  description: Read more about the Search.io API
  url: https://docs.search.io
servers:
- url: https://api.search.io
security:
- BasicAuth: []
tags:
- description: |-
    Collections store the records that you want to search through.

    They also contain the configuration associated with your data including pipelines, rules, synonyms, authorized domains and analytics. Each collection has an associated schema that designates field names, field types, and whether a field's data is indexed for text search.

    Create a collection for every new set of related records that you want to search through.
  name: Collections
- description: |-
    In Search.io, you configure your search algorithm using pipelines.

    Pipelines are easily configurable YAML-based scripts that define a series of steps that are executed sequentially when indexing a record, using a record pipeline, or performing a query, using a query pipeline.
  name: Pipelines
- description: |-
    A schema describes the set of fields that records in a collection can have.

    It is made up of a list of schema fields. Each schema field has a name, associated data type and mode.

    For example, the following record:

    ```json
    {
      "id": "54hdc7h2334h",
      "name": "Smart TV",
      "price": 1999,
      "brand": "Acme",
      "in_stock": true,
      "tags": ["TV", "Smart TV"],
      "create_time": "2006-01-02T15:04:05Z07:00"
    }
    ```

    Requires the following schema fields:

    - `id`, of type **STRING** and mode **UNIQUE**
    - `name`, of type **STRING**
    - `price`, of type **FLOAT**
    - `brand`, of type **STRING**
    - `in_stock`, of type **BOOLEAN**
    - `tags`, of type array of **STRING**
    - `create_time`, of type **TIMESTAMP**

    Type can be one of the following:

    - **STRING**
    - **INTEGER**
    - **BOOLEAN**
    - **FLOAT**
    - **DOUBLE**
    - **TIMESTAMP**, in [RFC3339](https://tools.ietf.org/html/rfc3339) format
    - Array of **STRING**
    - Array of **INTEGER**
    - Array of **BOOLEAN**
    - Array of **FLOAT**
    - Array of **DOUBLE**
    - Array of **TIMESTAMP**

    Mode can be one of the following:

    - **NULLABLE**, indicates a record field-value pair can be null
    - **REQUIRED**, indicates a record field-value pair is required
    - **UNIQUE**, indicates a record field-value pair must be unique across all records in the collection
  name: Schema
- description: |-
    A record is a single entry in a collection, made up of field-value pairs.

    For example in the following record:

    ```json
    {
      "name": "Kim Jones"
    }
    ```

    There is one field-value pair. The field is `name` and the value is `"Kim Jones"`.

    Records are analogous to rows in a database. Records can represent:

    - Webpages
    - Standard documents e.g. HTML, PDF, Microsoft Word Document
    - Custom data objects, if your data is not webpages or documents

    The set of fields a record can have is known as its schema. Webpages indexed via Search.io's web crawler have a predefined schema that can be extended with custom fields. For custom records, you can define your own schema.
  name: Records
- name: Promotions
- description: |-
    Websites, e-commerce stores and apps often have dedicated landing pages for important product categories, brands, or other promotional purposes.

    Instead of performing a search, Search.io has the ability to redirect users to these landing pages when a query matches certain criteria.
  name: Redirects
paths:
  /v4/collections:
    get:
      description: Retrieve a list of collections in an account.
      operationId: ListCollections
      parameters:
      - description: |-
          The maximum number of collections to return. The service may return fewer
          than this value.

          If unspecified, at most 50 collections are returned.

          The maximum value is 100; values above 100 are coerced to 100.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |-
          A page token, received from a previous
          [ListCollections](/api#operation/ListCollections) call.

          Provide this to retrieve the subsequent page.

          When paginating, all other parameters provided to
          [ListCollections](/api#operation/ListCollections) must match
          the call that provided the page token.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionsResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: List collections
      tags:
      - Collections
    post:
      description: |-
        Create an empty collection.

        Before records can be added to a collection, the schema and pipelines for
        the collection have to be set up. Consider setting up new collections via
        the Search.io Console, which handles the creation of the schema and
        pipelines for you.
      operationId: CreateCollection
      parameters:
      - description: |-
          The ID to use for the collection.

          This must start with an alphanumeric character followed by one or more
          alphanumeric or `-` characters. Strictly speaking, it must match the
          regular expression: `^[A-Za-z][A-Za-z0-9\-]*$`.
        explode: true
        in: query
        name: collection_id
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
        description: Details of the collection to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: A successful response.
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 6
                    details:
                    - '@type': type.googleapis.com/google.rpc.BadRequest
                      field_violations:
                      - description: required
                        field: collection_id
                    message: 'collection_id: required'
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request contains violations for one or more
            fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "409":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 6
                    message: resource already exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the collection already exists.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Create collection
      tags:
      - Collections
  /v4/collections/{collection_id}:
    delete:
      description: |-
        Delete a collection and all of its associated data.

        > Note: This operation cannot be reversed.
      operationId: DeleteCollection
      parameters:
      - description: The collection to delete, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 5
                    message: resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the collection was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Delete collection
      tags:
      - Collections
    get:
      description: Retrieve the details of a collection.
      operationId: GetCollection
      parameters:
      - description: The collection to retrieve, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Get collection
      tags:
      - Collections
    patch:
      description: Update the details of a collection.
      operationId: UpdateCollection
      parameters:
      - description: The collection to update, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The list of fields to be updated, separated by a comma, e.g.
          `field1,field2`.

          Each field should be in snake case, e.g. `display_name`.

          For each field that you want to update, provide a corresponding value in
          the collection object containing the new value.
        explode: true
        in: query
        name: update_mask
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
        description: Details of the collection to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 5
                    message: resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the collection was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Update collection
      tags:
      - Collections
  /v4/collections/{collection_id}/pipelines:
    get:
      description: Retrieve a list of pipelines in a collection.
      operationId: ListPipelines
      parameters:
      - description: The collection that owns this set of pipelines, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The maximum number of pipelines to return. The service may return fewer
          than this value.

          If unspecified, at most 50 pipelines are returned.

          The maximum value is 1000; values above 1000 are coerced to 1000.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |-
          A page token, received from a previous
          [ListPipelines](/api#operation/ListPipelines) call.

          Provide this to retrieve the subsequent page.

          When paginating, all other parameters provided to
          [ListPipelines](/api#operation/ListPipelines) must match the
          call that provided the page token.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      - description: |-
          The amount of information to include in each retrieved pipeline.

           - VIEW_UNSPECIFIED: The default / unset value.
          The API defaults to the `BASIC` view.
           - BASIC: Include basic information including type, name, version and description
          but not the full step configuration. This is the default value (for both
          [ListPipelines](/api#operation/ListPipelines) and
          [GetPipeline](/api#operation/GetPipeline)).
           - FULL: Include the information from `BASIC`, plus full step
          configuration.
        explode: true
        in: query
        name: view
        required: false
        schema:
          default: VIEW_UNSPECIFIED
          enum:
          - VIEW_UNSPECIFIED
          - BASIC
          - FULL
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPipelinesResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: List pipelines
      tags:
      - Pipelines
    post:
      description: |-
        Create a new pipeline.

        Pipelines are immutable once created. If you want to change a pipeline e.g.
        to add or change some steps, you need to create a new version of that
        pipeline.

        To start using a new pipeline you need to update your record ingestion
        calls and/or your query calls to specify the new pipeline.

        To create the pipeline from YAML, set the request's `Content-Type` header
        to `application/yaml` and submit the pipeline's YAML in the request body.
      operationId: CreatePipeline
      parameters:
      - description: The collection to create the pipeline in, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
          application/yaml:
            schema:
              $ref: '#/components/schemas/Pipeline'
        description: The pipeline to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Create pipeline
      tags:
      - Pipelines
  /v4/collections/{collection_id}/pipelines/{type}/{name}/{version}:
    get:
      description: |-
        Retrieve the details of a pipeline. Supply the type, name and version.

        To retrieve the pipeline in YAML, set the request's `Accept` header to
        `application/yaml`.
      operationId: GetPipeline
      parameters:
      - description: The collection that owns the pipeline, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: The type of the pipeline to retrieve.
        explode: false
        in: path
        name: type
        required: true
        schema:
          enum:
          - TYPE_UNSPECIFIED
          - RECORD
          - QUERY
          type: string
        style: simple
      - description: The name of the pipeline to retrieve, e.g. `my-pipeline`.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: The version of the pipeline to retrieve, e.g. `42`.
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The amount of information to include in the retrieved pipeline.

           - VIEW_UNSPECIFIED: The default / unset value.
          The API defaults to the `BASIC` view.
           - BASIC: Include basic information including type, name, version and description
          but not the full step configuration. This is the default value (for both
          [ListPipelines](/api#operation/ListPipelines) and
          [GetPipeline](/api#operation/GetPipeline)).
           - FULL: Include the information from `BASIC`, plus full step configuration.
        explode: true
        in: query
        name: view
        required: false
        schema:
          default: VIEW_UNSPECIFIED
          enum:
          - VIEW_UNSPECIFIED
          - BASIC
          - FULL
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
            application/yaml:
              examples:
                response:
                  value: |-
                    type: record
                    name: my-pipeline
                    version: "1"
                    description: version 1 of my-pipeline (record)
                    createTime: 2020-08-11T07:52:54.287Z
                    preSteps:
                    - id: step-id
                    postSteps:
                    - id: step-id
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Get pipeline
      tags:
      - Pipelines
  /v4/collections/{collection_id}/pipelines/{type}/{name}:getDefaultVersion:
    get:
      description: |-
        Get the default version for a given pipeline.

        The default version of a pipeline is used when a pipeline is referred to
        without specifying a version.

        This allows you to change the pipeline version used for requests without
        having to change your code.

        To retrieve the pipeline in YAML, set the request's `Accept` header to
        `application/yaml`.
      operationId: GetDefaultVersion
      parameters:
      - description: |-
          The collection that owns the pipeline to get the default version of, e.g.
          `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: The type of the pipeline to get the default version of.
        explode: false
        in: path
        name: type
        required: true
        schema:
          enum:
          - TYPE_UNSPECIFIED
          - RECORD
          - QUERY
          type: string
        style: simple
      - description: The name of the pipeline to get the default version of, e.g.
          `my-pipeline`.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The amount of information to include in the retrieved pipeline.

           - VIEW_UNSPECIFIED: The default / unset value.
          The API defaults to the `BASIC` view.
           - BASIC: Include basic information including type, name, version and description
          but not the full step configuration. This is the default value (for both
          [ListPipelines](/api#operation/ListPipelines) and
          [GetPipeline](/api#operation/GetPipeline)).
           - FULL: Include the information from `BASIC`, plus full step configuration.
        explode: true
        in: query
        name: view
        required: false
        schema:
          default: VIEW_UNSPECIFIED
          enum:
          - VIEW_UNSPECIFIED
          - BASIC
          - FULL
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
            application/yaml:
              examples:
                response:
                  value: |-
                    type: record
                    name: my-pipeline
                    version: "1"
                    description: version 1 of my-pipeline (record)
                    createTime: 2020-08-11T07:52:54.287Z
                    preSteps:
                    - id: step-id
                    postSteps:
                    - id: step-id
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 5
                    message: pipeline does not have a default version
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the pipeline does not have a default version.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Get default pipeline version
      tags:
      - Pipelines
  /v4/collections/{collection_id}/pipelines/{type}/{name}:setDefaultVersion:
    post:
      description: |-
        Set the default version for a given pipeline.

        The default version of a pipeline is used when a pipeline is referred to
        without specifying a version.

        This allows you to change the pipeline version used for requests without
        having to change your code.
      operationId: SetDefaultVersion
      parameters:
      - description: |-
          The collection that owns the pipeline to set the default version of, e.g.
          `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: The type of the pipeline to set the default version of.
        explode: false
        in: path
        name: type
        required: true
        schema:
          enum:
          - TYPE_UNSPECIFIED
          - RECORD
          - QUERY
          type: string
        style: simple
      - description: The name of the pipeline to set the default version of, e.g.
          `my-pipeline`.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDefaultVersionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDefaultVersionResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Set default pipeline version
      tags:
      - Pipelines
  /v4/collections/{collection_id}/promotions:
    get:
      description: |-
        Retrieve a list of promotions in a collection.

        Promotion pins, exclusions and filter boosts are not returned in this call.
      operationId: ListPromotions
      parameters:
      - description: The collection that owns this set of promotions, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The maximum number of promotions to return. The service may return fewer
          than this value.

          If unspecified, at most 50 promotions are returned.

          The maximum value is 1000; values above 1000 are coerced to 1000.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |-
          A page token, received from a previous
          [ListPromotions](/api#operation/ListPromotions) call.

          Provide this to retrieve the subsequent page.

          When paginating, all other parameters provided to
          [ListPromotions](/api#operation/ListPromotions) must match the call that
          provided the page token.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPromotionsResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: List promotions
      tags:
      - Promotions
    post:
      description: Create a new promotion in a collection.
      operationId: CreatePromotion
      parameters:
      - description: The collection to create a promotion in, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotion'
        description: The promotion to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Create promotion
      tags:
      - Promotions
  /v4/collections/{collection_id}/promotions/{promotion_id}:
    delete:
      description: |-
        Delete a promotion and all of its associated data.

        > Note: This operation cannot be reversed.
      operationId: DeletePromotion
      parameters:
      - description: The collection the promotion belongs to, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: The promotion to delete, e.g. `1234`.
        explode: false
        in: path
        name: promotion_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 5
                    message: resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the promotion was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Delete promotion
      tags:
      - Promotions
    get:
      description: Retrieve the details of a promotion.
      operationId: GetPromotion
      parameters:
      - description: The collection that owns the promotion, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: The promotion to retrieve, e.g. `1234`.
        explode: false
        in: path
        name: promotion_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Get promotion
      tags:
      - Promotions
    patch:
      description: |-
        Update the details of a promotion.

        Pass each field that you want to update in the request body. Also specify
        the name of each field that you want to update in the `update_mask` in the
        request URL query string. Separate multiple fields with a comma. Fields
        included in the request body, but not included in the field mask are not
        updated.

        For example, to update the `display_name` and `start_time` fields, make a
        `PATCH` request to the URL:

        ```
        /v4/collections/{collection_id}/promotions/{promotion_id}?update_mask=display_name,start_time
        ```

        With the JSON body:

        ```
        {
          "display_name": "new value",
          "start_time": "2006-01-02T15:04:05Z07:00",
          "end_time": "2006-01-02T15:04:05Z07:00"
        }
        ```

        > Note: In this example `end_time` is not updated because it is not
        specified in the `update_mask`.
      operationId: UpdatePromotion
      parameters:
      - description: The collection the promotion belongs to, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: The promotion to update, e.g. `1234`.
        explode: false
        in: path
        name: promotion_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The list of fields to be updated, separated by a comma, e.g.
          `field1,field2`.

          Each field should be in snake case, e.g. `display_name`, `filter_boosts`.

          For each field that you want to update, provide a corresponding value in
          the promotion object containing the new value.
        explode: true
        in: query
        name: update_mask
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotion'
        description: Details of the promotion to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 5
                    message: resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the promotion was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Update promotion
      tags:
      - Promotions
  /v4/collections/{collection_id}/records:batchUpsert:
    post:
      description: |-
        The batch version of the
        [UpsertRecord](/api#operation/UpsertRecord) call.
      operationId: BatchUpsertRecords
      parameters:
      - description: The collection to upsert the records in, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpsertRecordsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpsertRecordsResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Batch upsert records
      tags:
      - Records
  /v4/collections/{collection_id}/records:delete:
    post:
      description: Delete a record with the given key.
      operationId: DeleteRecord
      parameters:
      - description: The collection that contains the record to delete, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRecordRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Delete record
      tags:
      - Records
  /v4/collections/{collection_id}/records:get:
    post:
      description: Retrieve a record with the given key.
      operationId: GetRecord
      parameters:
      - description: The collection that contains the record to retrieve, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRecordRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Get record
      tags:
      - Records
  /v4/collections/{collection_id}/records:update:
    post:
      description: |-
        Add or update specific fields within a record with the given values. The
        updated record is returned in the response.

        To replace all fields in a record, you should use the
        [UpsertRecord](/api#operation/UpsertRecord) call.

        Note that the update record call cannot be used to add or update indexed
        or unique fields. For this case use the
        [UpsertRecord](/api#operation/UpsertRecord) call.
      operationId: UpdateRecord
      parameters:
      - description: The collection that contains the record to update, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRecordRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Update record
      tags:
      - Records
  /v4/collections/{collection_id}/records:upsert:
    post:
      description: |-
        If the record does not exist in the collection it is inserted. If it does
        exist it is updated.

        If no pipeline is specified, the default record pipeline is used to process
        the record.

        If the record is inserted, the response contains the key of the inserted
        record. You can use this if you need to retrieve or delete the record. If
        the record is updated, the response does not contain a key. Callers can use
        this as a signal to determine if the record is inserted/created or updated.

        For example, to add a single product from your ecommerce store to a
        collection, use the following call:

        ```json
        {
          "pipeline": {
            "name": "my-pipeline",
            "version": "1"
          },
          "record": {
            "id": "54hdc7h2334h",
            "name": "Smart TV",
            "price": 1999,
            "brand": "Acme",
            "description": "...",
            "in_stock": true
          }
        }
        ```
      operationId: UpsertRecord
      parameters:
      - description: The collection to upsert the record in, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertRecordRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertRecordResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Upsert record
      tags:
      - Records
  /v4/collections/{collection_id}/redirects:
    get:
      description: Retrieve a list of redirects in a collection.
      operationId: ListRedirects
      parameters:
      - description: The collection that owns this set of redirects, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The maximum number of redirects to return. The service may return fewer
          than this value.

          If unspecified, at most 50 redirects are returned.

          The maximum value is 1000; values above 1000 are coerced to 1000.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |-
          A page token, received from a previous
          [ListRedirects](/api#operation/ListRedirects) call.

          Provide this to retrieve the subsequent page.

          When paginating, all other parameters provided to
          [ListRedirects](/api#operation/ListRedirects) must match the call that
          provided the page token.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRedirectsResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: List redirects
      tags:
      - Redirects
    post:
      description: Create a new redirect in a collection.
      operationId: CreateRedirect
      parameters:
      - description: The collection to create a redirect in, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Redirect'
        description: The redirect to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Redirect'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Create redirect
      tags:
      - Redirects
  /v4/collections/{collection_id}/redirects/{redirect_id}:
    delete:
      description: |-
        Delete a redirect and all of its associated data.

        > Note: This operation cannot be reversed.
      operationId: DeleteRedirect
      parameters:
      - description: The collection the redirect belongs to, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: The redirect to delete, e.g. `1234`.
        explode: false
        in: path
        name: redirect_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 5
                    message: resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the redirect was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Delete redirect
      tags:
      - Redirects
    get:
      description: Retrieve the details of a redirect.
      operationId: GetRedirect
      parameters:
      - description: The collection that owns the redirect, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: The redirect to retrieve, e.g. `1234`.
        explode: false
        in: path
        name: redirect_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Redirect'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Get redirect
      tags:
      - Redirects
    patch:
      description: |-
        Update the details of a redirect.

        Pass each field that you want to update in the request body. Also specify
        the name of each field that you want to update in the `update_mask` in the
        request URL query string. Separate multiple fields with a comma. Fields
        included in the request body, but not included in the field mask are not
        updated.

        For example, to update the `condition` field, make a `PATCH` request to the
        URL:

        ```
        /v4/collections/{collection_id}/redirects/{redirect_id}?update_mask=condition
        ```

        With the JSON body:

        ```
        {
          "condition": "new value",
          "target": "..."
        }
        ```

        > Note: In this example `target` is not updated because it is not specified
        in the `update_mask`.
      operationId: UpdateRedirect
      parameters:
      - description: The collection the redirect belongs to, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: The redirect to update, e.g. `1234`.
        explode: false
        in: path
        name: redirect_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The list of fields to be updated, separated by a comma, e.g.
          `field1,field2`.

          Each field should be in snake case, e.g. `condition`, `target`.

          For each field that you want to update, provide a corresponding value in
          the redirect object containing the new value.
        explode: true
        in: query
        name: update_mask
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Redirect'
        description: Details of the redirect to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Redirect'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 5
                    message: resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the redirect was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Update redirect
      tags:
      - Redirects
  /v4/collections/{collection_id}/schemaFields:
    get:
      description: Retrieve a list of schema fields in a collection.
      operationId: ListSchemaFields
      parameters:
      - description: The collection that owns this set of schema fields, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The maximum number of schema fields to return. The service may return
          fewer than this value.

          If unspecified, at most 50 schema fields are returned.

          The maximum value is 1000; values above 1000 are coerced to 1000.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |-
          A page token, received from a previous
          [ListSchemaFields](/api#operation/ListSchemaFields) call.

          Provide this to retrieve the subsequent page.

          When paginating, all other parameters provided to
          [ListSchemaFields](/api#operation/ListSchemaFields) must
          match the call that provided the page token.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSchemaFieldsResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: List schema fields
      tags:
      - Schema
    post:
      description: Create a new field in a collection's schema.
      operationId: CreateSchemaField
      parameters:
      - description: The collection to create a schema field in, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaField'
        description: The schema field to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaField'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Create schema field
      tags:
      - Schema
  /v4/collections/{collection_id}/schemaFields:batchCreate:
    post:
      description: |-
        The batch version of the
        [CreateSchemaField](/api#operation/CreateSchemaField) call.
      operationId: BatchCreateSchemaFields
      parameters:
      - description: The collection to create the schema fields in, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateSchemaFieldsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateSchemaFieldsResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Batch create schema fields
      tags:
      - Schema
  /v4/collections/{collection_id}:generatePipelines:
    post:
      description: |-
        Generate basic record, query and autocomplete pipeline templates.
        Use these templates as a starting point for your collection's pipelines.

        This call returns a set of pipelines that you can pass directly to the
        create pipeline call.

        The generated templates can be returned in JSON, the default, or YAML. To
        return the generated pipelines in YAML, set the request's `Accept` header
        to `application/yaml`. The three pipelines in the YAML response are
        separated by three dashes (`---`).
      operationId: GeneratePipelines
      parameters:
      - description: The collection, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneratePipelinesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratePipelinesResponse'
            application/yaml:
              examples:
                response:
                  value: |-
                    type: record
                    preSteps:
                    - id: step-id
                    postSteps:
                    - id: step-id
                    ---
                    type: query
                    preSteps:
                    - id: step-id
                    postSteps:
                    - id: step-id
                    ---
                    type: autocomplete
                    preSteps:
                    - id: step-id
                    postSteps:
                    - id: step-id
              schema:
                $ref: '#/components/schemas/GeneratePipelinesResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Generate pipelines
      tags:
      - Pipelines
  /v4/collections/{collection_id}:getDefaultPipeline:
    get:
      description: |-
        Get the default pipeline for a collection.

        Every collection has a default record pipeline and a default query
        pipeline.

        When a pipeline is required to complete an operation, it can be omitted
        from the request if a default pipeline has been set. When adding a record
        to a collection, the default record pipeline is used if none is provided.
        When querying a collection, the default query pipeline is used if none is
        provided.
      operationId: GetDefaultPipeline
      parameters:
      - description: The collection to get the default query pipeline of, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The type of the pipeline to get.

           - TYPE_UNSPECIFIED: Pipeline type not specified.
           - RECORD: Record pipeline.
           - QUERY: Query pipeline.
        explode: true
        in: query
        name: type
        required: true
        schema:
          default: TYPE_UNSPECIFIED
          enum:
          - TYPE_UNSPECIFIED
          - RECORD
          - QUERY
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDefaultPipelineResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Get default pipeline
      tags:
      - Pipelines
  /v4/collections/{collection_id}:query:
    post:
      description: |-
        Query the collection to search for records.

        The following example demonstrates how to run a simple search for a
        particular string:

        ```json
        {
          "variables": { "q": "search terms" }
        }
        ```

        For more information:

        - See [filtering
        content](https://docs.search.io/documentation/fundamentals/integrating-search/filters-and-sort-options)
        - See [tracking in the Go
        SDK](https://github.com/sajari/sdk-go/blob/v2/session.go)
        - See [tracking in the JS
        SDK](https://github.com/sajari/sajari-sdk-js/blob/master/src/session.ts)
      operationId: QueryCollection
      parameters:
      - description: The collection to query, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/QueryCollectionRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryCollectionResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Query collection
      tags:
      - Collections
  /v4/collections/{collection_id}:queryCollection:
    post:
      deprecated: true
      description: |-
        Query the collection to search for records.

        The following example demonstrates how to run a simple search for a
        particular string:

        ```json
        {
          "variables": { "q": "search terms" }
        }
        ```

        For more information:

        - See [filtering
        content](https://docs.search.io/documentation/fundamentals/integrating-search/filters-and-sort-options)
        - See [tracking in the Go
        SDK](https://github.com/sajari/sdk-go/blob/v2/session.go)
        - See [tracking in the JS
        SDK](https://github.com/sajari/sajari-sdk-js/blob/master/src/session.ts)
      operationId: QueryCollection2
      parameters:
      - description: The collection to query, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/QueryCollectionRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryCollectionResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Query collection
      tags:
      - Collections
  /v4/collections/{collection_id}:setDefaultPipeline:
    post:
      description: |-
        Set the default pipeline for a collection.

        Every collection has a default record pipeline and a default query
        pipeline.

        When a pipeline is required to complete an operation, it can be omitted
        from the request if a default pipeline has been set. When adding a record
        to a collection, the default record pipeline is used if none is provided.
        When querying a collection, the default query pipeline is used if none is
        provided.

        Once a default pipeline has been set it cannot be cleared, only set to
        another pipeline.
      operationId: SetDefaultPipeline
      parameters:
      - description: The collection to set the default query pipeline of, e.g. `my-collection`.
        explode: false
        in: path
        name: collection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDefaultPipelineRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDefaultPipelineResponse'
          description: A successful response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Set default pipeline
      tags:
      - Pipelines
  /v4/events:send:
    post:
      description: |-
        Send an event to the ranking system after a user interacts with a search
        result.

        When querying a collection, you can set the tracking type of the query
        request. When it is `CLICK` or `POS_NEG`, a token is generated for each
        result in the query response. You can use this token to provide feedback to
        the ranking system. Each time you want to record an event on a particular
        search result, use the send event call and provide:

        - The `name` of the event, e.g. `click`, `purchase`.
        - The `token` from the search result.
        - The `weight` to assign to the event, e.g. `1`.
        - An object containing any additional `metadata`.

        For example, to send an event where a customer purchased a product, use the
        following call:

        ```json
        {
          "name": "purchase",
          "token": "eyJ...",
          "weight": 1,
          "metadata": {
            "discount": 0.2,
            "margin": 30.0,
            "customer_id": "12345",
            "ui_test_segment": "A"
          }
        }
        ```
      operationId: SendEvent
      requestBody:
        $ref: '#/components/requestBodies/SendEventRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEventResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 6
                    details:
                    - '@type': type.googleapis.com/google.rpc.BadRequest
                      field_violations:
                      - description: required
                        field: token
                    message: 'token: required'
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request contains violations for one or more
            fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Send event
      tags:
      - Events
  /v4/events:sendEvent:
    post:
      deprecated: true
      description: |-
        Send an event to the ranking system after a user interacts with a search
        result.

        When querying a collection, you can set the tracking type of the query
        request. When it is `CLICK` or `POS_NEG`, a token is generated for each
        result in the query response. You can use this token to provide feedback to
        the ranking system. Each time you want to record an event on a particular
        search result, use the send event call and provide:

        - The `name` of the event, e.g. `click`, `purchase`.
        - The `token` from the search result.
        - The `weight` to assign to the event, e.g. `1`.
        - An object containing any additional `metadata`.

        For example, to send an event where a customer purchased a product, use the
        following call:

        ```json
        {
          "name": "purchase",
          "token": "eyJ...",
          "weight": 1,
          "metadata": {
            "discount": 0.2,
            "margin": 30.0,
            "customer_id": "12345",
            "ui_test_segment": "A"
          }
        }
        ```
      operationId: SendEvent2
      requestBody:
        $ref: '#/components/requestBodies/SendEventRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEventResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 6
                    details:
                    - '@type': type.googleapis.com/google.rpc.BadRequest
                      field_violations:
                      - description: required
                        field: token
                    message: 'token: required'
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request contains violations for one or more
            fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the request does not have valid authentication
            credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the API encounters an internal error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error response.
      summary: Send event
      tags:
      - Events
components:
  requestBodies:
    QueryCollectionRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueryCollectionRequest'
      required: true
    SendEventRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SendEventRequest'
      required: true
  schemas:
    ActivePromotion:
      description: ActivePromotion is a promotion that is active for a given search.
      example:
        active_pins:
        - position: 6
          key:
            field: field
            value: value
        - position: 6
          key:
            field: field
            value: value
        promotion_id: promotion_id
        active_exclusions:
        - key:
            field: field
            value: value
        - key:
            field: field
            value: value
      properties:
        active_exclusions:
          description: The records that are excluded from the result set by the active
            promotion.
          items:
            $ref: '#/components/schemas/PromotionExclusion'
          type: array
        active_pins:
          description: |-
            The pins that belong to the active promotion. Note that the positions in
            these pins are the positions specified at pin creation time, which is not
            necessarily the position that a pin ends up in. For example, if a pin is
            created at position 2, but the query that the pin is active in has zero
            results, the pinned result actually appears in position 1.
          items:
            $ref: '#/components/schemas/PromotionPin'
          type: array
        promotion_id:
          description: The ID of the active promotion.
          type: string
      type: object
    BatchCreateSchemaFieldsRequest:
      example:
        fields:
        - array: true
          name: name
          description: description
          array_length: 0
        - array: true
          name: name
          description: description
          array_length: 0
      properties:
        fields:
          description: |-
            A list of fields to create.

            A maximum of 1000 fields can be created in a batch.
          items:
            $ref: '#/components/schemas/SchemaField'
          type: array
      required:
      - fields
      type: object
    BatchCreateSchemaFieldsResponse:
      example:
        fields:
        - array: true
          name: name
          description: description
          array_length: 0
        - array: true
          name: name
          description: description
          array_length: 0
        errors:
        - index: 0
          status:
            code: 6
            details:
            - value: value
              type_url: type_url
            - value: value
              type_url: type_url
            message: message
        - index: 0
          status:
            code: 6
            details:
            - value: value
              type_url: type_url
            - value: value
              type_url: type_url
            message: message
      properties:
        errors:
          description: Errors that occurred.
          items:
            $ref: '#/components/schemas/BatchCreateSchemaFieldsResponseError'
          type: array
        fields:
          description: Schema fields created.
          items:
            $ref: '#/components/schemas/SchemaField'
          type: array
      type: object
    BatchCreateSchemaFieldsResponseError:
      example:
        index: 0
        status:
          code: 6
          details:
          - value: value
            type_url: type_url
          - value: value
            type_url: type_url
          message: message
      properties:
        index:
          description: Index of the schema field in `fields` that this error corresponds
            to.
          format: int32
          type: integer
        status:
          $ref: '#/components/schemas/Status'
      type: object
    BatchUpsertRecordsRequest:
      example:
        pipeline:
          name: name
          version: version
        variables:
          key: '{}'
        records:
        - '{}'
        - '{}'
      properties:
        pipeline:
          $ref: '#/components/schemas/BatchUpsertRecordsRequestPipeline'
        records:
          description: |-
            A list of records to upsert.

            A maximum of 200 records can be upsert in a batch.
          items:
            type: object
          type: array
        variables:
          additionalProperties:
            type: object
          description: |-
            The initial values for the variables the pipeline operates on and
            transforms throughout its steps.
          type: object
      required:
      - records
      type: object
    BatchUpsertRecordsRequestPipeline:
      description: |-
        The pipeline to use when upserting the records.

        If not provided the default record pipeline is used.
      example:
        name: name
        version: version
      properties:
        name:
          description: The record pipeline's name, e.g. `my-pipeline`.
          type: string
        version:
          description: |-
            The record pipeline's version, e.g. `42`.

            If not provided the default version is used.
          type: string
      required:
      - name
      type: object
    BatchUpsertRecordsResponse:
      example:
        variables:
        - variables:
            key: '{}'
          index: 5
        - variables:
            key: '{}'
          index: 5
        keys:
        - index: 1
          key:
            field: field
            value: value
        - index: 1
          key:
            field: field
            value: value
        errors:
        - index: 0
          status:
            code: 6
            details:
            - value: value
              type_url: type_url
            - value: value
              type_url: type_url
            message: message
        - index: 0
          status:
            code: 6
            details:
            - value: value
              type_url: type_url
            - value: value
              type_url: type_url
            message: message
      properties:
        errors:
          description: Errors that occurred.
          items:
            $ref: '#/components/schemas/BatchUpsertRecordsResponseError'
          type: array
        keys:
          description: |-
            A list of keys of the records that were inserted.

            If a record was inserted, keys contains an entry containing the index of
            the inserted record from `records` and the key. You can use the key if you
            need to retrieve or delete the record.

            If a record was updated, keys contains no such entry for the updated
            record.
          items:
            $ref: '#/components/schemas/BatchUpsertRecordsResponseKey'
          type: array
        variables:
          description: |-
            A list of modified variables returned by the pipeline after it has finished
            processing each record.
          items:
            $ref: '#/components/schemas/BatchUpsertRecordsResponseVariables'
          type: array
      type: object
    BatchUpsertRecordsResponseError:
      example:
        index: 0
        status:
          code: 6
          details:
          - value: value
            type_url: type_url
          - value: value
            type_url: type_url
          message: message
      properties:
        index:
          description: Index of the record in `records` that this error corresponds
            to.
          format: int32
          type: integer
        status:
          $ref: '#/components/schemas/Status'
      type: object
    BatchUpsertRecordsResponseKey:
      example:
        index: 1
        key:
          field: field
          value: value
      properties:
        index:
          description: Index of the record in `records` that this key corresponds
            to.
          format: int32
          type: integer
        key:
          $ref: '#/components/schemas/RecordKey'
      type: object
    BatchUpsertRecordsResponseVariables:
      example:
        variables:
          key: '{}'
        index: 5
      properties:
        index:
          description: Index of the record in `records` that these variables correspond
            to.
          format: int32
          type: integer
        variables:
          additionalProperties:
            type: object
          description: The variables.
          type: object
      type: object
    Collection:
      example:
        account_id: account_id
        authorized_query_domains:
        - authorized_query_domains
        - authorized_query_domains
        create_time: 2000-01-23T04:56:07.000+00:00
        id: id
        display_name: display_name
      properties:
        account_id:
          description: Output only. The ID of the account that owns this collection.
          readOnly: true
          type: string
        authorized_query_domains:
          description: |-
            The list of authorized query domains for the collection.

            Client-side / browser requests to the
            [QueryCollection](/api#operation/QueryCollection) call can
            be made by any authorized query domain or any of its subdomains. This
            allows your interface to make search requests without having to provide an
            API key in the client-side request.
          items:
            type: string
          type: array
        create_time:
          description: Output only. Time the collection was created.
          format: date-time
          readOnly: true
          type: string
        display_name:
          description: The collection's display name. You can change this at any time.
          type: string
        id:
          description: Output only. The collection's ID.
          readOnly: true
          type: string
      required:
      - display_name
      type: object
    DeleteRecordRequest:
      example:
        key:
          field: field
          value: value
      properties:
        key:
          $ref: '#/components/schemas/RecordKey'
      required:
      - key
      type: object
    Error:
      properties:
        code:
          format: int32
          type: integer
        details:
          items:
            $ref: '#/components/schemas/protobufAny'
          type: array
        message:
          type: string
      type: object
    GeneratePipelinesRequest:
      example:
        query_training_fields:
        - query_training_fields
        - query_training_fields
        searchable_fields:
        - searchable_fields
        - searchable_fields
      properties:
        query_training_fields:
          description: List of fields to train query suggestions from.
          items:
            type: string
          type: array
        searchable_fields:
          description: Prioritized list of fields to search.
          items:
            type: string
          type: array
      required:
      - searchable_fields
      type: object
    GeneratePipelinesResponse:
      example:
        record_pipeline:
          create_time: 2000-01-23T04:56:07.000+00:00
          post_steps:
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          collection_default: true
          default_version: true
          name: name
          pre_steps:
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          description: description
          version: version
        autocomplete_pipeline:
          create_time: 2000-01-23T04:56:07.000+00:00
          post_steps:
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          collection_default: true
          default_version: true
          name: name
          pre_steps:
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          description: description
          version: version
        query_pipeline:
          create_time: 2000-01-23T04:56:07.000+00:00
          post_steps:
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          collection_default: true
          default_version: true
          name: name
          pre_steps:
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          description: description
          version: version
      properties:
        autocomplete_pipeline:
          $ref: '#/components/schemas/Pipeline'
        query_pipeline:
          $ref: '#/components/schemas/Pipeline'
        record_pipeline:
          $ref: '#/components/schemas/Pipeline'
      type: object
    GetDefaultPipelineResponse:
      example:
        pipeline: pipeline
      properties:
        pipeline:
          description: The name of the pipeline to use when not otherwise specified.
          type: string
      type: object
    GetDefaultVersionRequestView:
      default: VIEW_UNSPECIFIED
      description: |2-
         - VIEW_UNSPECIFIED: The default / unset value.
        The API defaults to the `BASIC` view.
         - BASIC: Include basic information including type, name, version and description
        but not the full step configuration. This is the default value (for both
        [ListPipelines](/api#operation/ListPipelines) and
        [GetPipeline](/api#operation/GetPipeline)).
         - FULL: Include the information from `BASIC`, plus full step configuration.
      enum:
      - VIEW_UNSPECIFIED
      - BASIC
      - FULL
      type: string
    GetPipelineRequestView:
      default: VIEW_UNSPECIFIED
      description: |2-
         - VIEW_UNSPECIFIED: The default / unset value.
        The API defaults to the `BASIC` view.
         - BASIC: Include basic information including type, name, version and description
        but not the full step configuration. This is the default value (for both
        [ListPipelines](/api#operation/ListPipelines) and
        [GetPipeline](/api#operation/GetPipeline)).
         - FULL: Include the information from `BASIC`, plus full step configuration.
      enum:
      - VIEW_UNSPECIFIED
      - BASIC
      - FULL
      type: string
    GetRecordRequest:
      example:
        key:
          field: field
          value: value
      properties:
        key:
          $ref: '#/components/schemas/RecordKey'
      required:
      - key
      type: object
    Integration:
      description: Integration contains integration config, e.g. filters and sort
        options.
      properties:
        account_id:
          description: |-
            Output only. The ID of the account that owns the collection, e.g.
            `1618535966441231024`.
          readOnly: true
          type: string
        collection_id:
          description: |-
            Output only. The ID of the collection that owns this integration, e.g.
            `my-collection`.
          readOnly: true
          type: string
        config:
          description: The integration's config.
          type: object
        create_time:
          description: Output only. The time the integration was created.
          format: date-time
          readOnly: true
          type: string
        display_name:
          description: The integration's display name.
          type: string
        id:
          description: Output only. The integration's ID.
          readOnly: true
          type: string
        update_time:
          description: Output only. The time the integration was last updated.
          format: date-time
          readOnly: true
          type: string
      required:
      - config
      - display_name
      type: object
    ListCollectionsResponse:
      example:
        next_page_token: next_page_token
        collections:
        - account_id: account_id
          authorized_query_domains:
          - authorized_query_domains
          - authorized_query_domains
          create_time: 2000-01-23T04:56:07.000+00:00
          id: id
          display_name: display_name
        - account_id: account_id
          authorized_query_domains:
          - authorized_query_domains
          - authorized_query_domains
          create_time: 2000-01-23T04:56:07.000+00:00
          id: id
          display_name: display_name
      properties:
        collections:
          description: The collections from the specified account.
          items:
            $ref: '#/components/schemas/Collection'
          type: array
        next_page_token:
          description: |-
            A token, which can be sent as `page_token` to retrieve the next page.

            If this field is omitted, there are no subsequent pages.
          type: string
      type: object
    ListIntegrationsResponse:
      description: ListIntegrations response.
      properties:
        integrations:
          description: The integrations.
          items:
            $ref: '#/components/schemas/Integration'
          type: array
        next_page_token:
          description: |-
            A token, which can be sent as `page_token` to retrieve the next page.

            If this field is omitted, there are no subsequent pages.
          type: string
      type: object
    ListPipelinesRequestView:
      default: VIEW_UNSPECIFIED
      description: |2-
         - VIEW_UNSPECIFIED: The default / unset value.
        The API defaults to the `BASIC` view.
         - BASIC: Include basic information including type, name, version and description
        but not the full step configuration. This is the default value (for both
        [ListPipelines](/api#operation/ListPipelines) and
        [GetPipeline](/api#operation/GetPipeline)).
         - FULL: Include the information from `BASIC`, plus full step
        configuration.
      enum:
      - VIEW_UNSPECIFIED
      - BASIC
      - FULL
      type: string
    ListPipelinesResponse:
      example:
        pipelines:
        - create_time: 2000-01-23T04:56:07.000+00:00
          post_steps:
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          collection_default: true
          default_version: true
          name: name
          pre_steps:
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          description: description
          version: version
        - create_time: 2000-01-23T04:56:07.000+00:00
          post_steps:
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          collection_default: true
          default_version: true
          name: name
          pre_steps:
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          - condition: condition
            annotations:
            - annotations
            - annotations
            description: description
            id: id
            params:
              key:
                bind: bind
                constant: constant
                description: description
                default_value: default_value
            title: title
          description: description
          version: version
        next_page_token: next_page_token
      properties:
        next_page_token:
          description: |-
            A token, which can be sent as `page_token` to retrieve the next page.

            If this field is omitted, there are no subsequent pages.
          type: string
        pipelines:
          description: The pipelines from the specified collection.
          items:
            $ref: '#/components/schemas/Pipeline'
          type: array
      type: object
    ListPromotionsResponse:
      example:
        promotions:
        - filter_boosts:
          - filter: filter
            boost: 0.8008282
          - filter: filter
            boost: 0.8008282
          create_time: 2000-01-23T04:56:07.000+00:00
          end_time: 2000-01-23T04:56:07.000+00:00
          exclusions:
          - key:
              field: field
              value: value
          - key:
              field: field
              value: value
          pins:
          - position: 6
            key:
              field: field
              value: value
          - position: 6
            key:
              field: field
              value: value
          display_name: display_name
          collection_id: collection_id
          start_time: 2000-01-23T04:56:07.000+00:00
          condition: condition
          update_time: 2000-01-23T04:56:07.000+00:00
          disabled: true
          id: id
          filter_conditions:
          - filter:
            - filter
            - filter
          - filter:
            - filter
            - filter
          range_boosts:
          - null_boost: 5.637377
            field: field
            start: 2.302136
            boost: 1.4658129
            end: 5.962134
          - null_boost: 5.637377
            field: field
            start: 2.302136
            boost: 1.4658129
            end: 5.962134
        - filter_boosts:
          - filter: filter
            boost: 0.8008282
          - filter: filter
            boost: 0.8008282
          create_time: 2000-01-23T04:56:07.000+00:00
          end_time: 2000-01-23T04:56:07.000+00:00
          exclusions:
          - key:
              field: field
              value: value
          - key:
              field: field
              value: value
          pins:
          - position: 6
            key:
              field: field
              value: value
          - position: 6
            key:
              field: field
              value: value
          display_name: display_name
          collection_id: collection_id
          start_time: 2000-01-23T04:56:07.000+00:00
          condition: condition
          update_time: 2000-01-23T04:56:07.000+00:00
          disabled: true
          id: id
          filter_conditions:
          - filter:
            - filter
            - filter
          - filter:
            - filter
            - filter
          range_boosts:
          - null_boost: 5.637377
            field: field
            start: 2.302136
            boost: 1.4658129
            end: 5.962134
          - null_boost: 5.637377
            field: field
            start: 2.302136
            boost: 1.4658129
            end: 5.962134
        next_page_token: next_page_token
      properties:
        next_page_token:
          description: |-
            A token, which can be sent as `page_token` to retrieve the next page.

            If this field is omitted, there are no subsequent pages.
          type: string
        promotions:
          description: The promotions.
          items:
            $ref: '#/components/schemas/Promotion'
          type: array
      type: object
    ListRedirectsResponse:
      example:
        next_page_token: next_page_token
        redirects:
        - collection_id: collection_id
          condition: condition
          update_time: 2000-01-23T04:56:07.000+00:00
          create_time: 2000-01-23T04:56:07.000+00:00
          disabled: true
          id: id
          target: target
        - collection_id: collection_id
          condition: condition
          update_time: 2000-01-23T04:56:07.000+00:00
          create_time: 2000-01-23T04:56:07.000+00:00
          disabled: true
          id: id
          target: target
      properties:
        next_page_token:
          description: |-
            A token, which can be sent as `page_token` to retrieve the next page.

            If this field is omitted, there are no subsequent pages.
          type: string
        redirects:
          description: The redirects.
          items:
            $ref: '#/components/schemas/Redirect'
          type: array
      type: object
    ListSchemaFieldsResponse:
      example:
        next_page_token: next_page_token
        total_size: 6
        schema_fields:
        - array: true
          name: name
          description: description
          array_length: 0
        - array: true
          name: name
          description: description
          array_length: 0
      properties:
        next_page_token:
          description: |-
            A token, which can be sent as `page_token` to retrieve the next page.

            If this field is omitted, there are no subsequent pages.
          type: string
        schema_fields:
          description: The schema fields.
          items:
            $ref: '#/components/schemas/SchemaField'
          type: array
        total_size:
          description: Maximum number of fields to return.
          format: int32
          type: integer
      type: object
    PercentileDataPoint:
      example:
        value: 4.145608029883936
        point: 2.027123023002322
      properties:
        point:
          description: The input point.
          format: double
          type: number
        value:
          description: The corresponding value for the given point.
          format: double
          type: number
      type: object
    Pipeline:
      example:
        create_time: 2000-01-23T04:56:07.000+00:00
        post_steps:
        - condition: condition
          annotations:
          - annotations
          - annotations
          description: description
          id: id
          params:
            key:
              bind: bind
              constant: constant
              description: description
              default_value: default_value
          title: title
        - condition: condition
          annotations:
          - annotations
          - annotations
          description: description
          id: id
          params:
            key:
              bind: bind
              constant: constant
              description: description
              default_value: default_value
          title: title
        collection_default: true
        default_version: true
        name: name
        pre_steps:
        - condition: condition
          annotations:
          - annotations
          - annotations
          description: description
          id: id
          params:
            key:
              bind: bind
              constant: constant
              description: description
              default_value: default_value
          title: title
        - condition: condition
          annotations:
          - annotations
          - annotations
          description: description
          id: id
          params:
            key:
              bind: bind
              constant: constant
              description: description
              default_value: default_value
          title: title
        description: description
        version: version
      properties:
        collection_default:
          description: Output only. Indicates if the pipeline is the collection default
            pipeline.
          readOnly: true
          type: boolean
        create_time:
          description: Output only. Time the pipeline was created.
          format: date-time
          readOnly: true
          type: string
        default_version:
          description: Output only. Indicates if the pipeline is the default version.
          readOnly: true
          type: boolean
        description:
          description: Description of the pipeline.
          type: string
        name:
          description: |-
            The pipeline's name.

            Must start with an alphanumeric character followed by one or more
            alphanumeric, `_`, `-` or `.` characters. Strictly speaking, it must match
            the regular expression: `^[a-zA-Z0-9][a-zA-Z0-9_\-\.]+$`.
          type: string
        post_steps:
          description: |-
            The post-steps that are run after an indexing operation or query request
            has been sent to the search index.

            For indexing operations, the post-steps only run when creating new records.
            They do not run when updating records.

            For querying, the post-steps have access to the result-set. This makes it
            possible to act on the results before sending them back to the caller.
          items:
            $ref: '#/components/schemas/PipelineStep'
          type: array
        pre_steps:
          description: |-
            The pre-steps that are run before an indexing operation or query request is
            sent to the search index.
          items:
            $ref: '#/components/schemas/PipelineStep'
          type: array
        type:
          $ref: '#/components/schemas/PipelineType'
        version:
          description: |-
            The pipeline's version.

            Must start with an alphanumeric character followed by one or more
            alphanumeric, `_`, `-` or `.` characters. Strictly speaking, it must match
            the regular expression: `^[a-zA-Z0-9][a-zA-Z0-9_\-\.]+$`.
          type: string
      required:
      - name
      - type
      - version
      type: object
    PipelineStep:
      description: Step creates a pipeline step.
      example:
        condition: condition
        annotations:
        - annotations
        - annotations
        description: description
        id: id
        params:
          key:
            bind: bind
            constant: constant
            description: description
            default_value: default_value
        title: title
      properties:
        annotations:
          description: Annotations added to the request when the step is run.
          items:
            type: string
          type: array
        condition:
          description: |-
            A condition expression to determine if the step should be run.

            This is a filter expression much like the query filter expression, but it
            acts upon the pipeline variables.

            For example, to only run the step if the pipeline `q` variable is not
            empty, set this to `q != ''`.
          type: string
        description:
          description: Description for the step. Overrides the default description.
          type: string
        id:
          description: ID of the step template.
          type: string
        params:
          additionalProperties:
            $ref: '#/components/schemas/PipelineStepParamBinding'
          description: Bindings for the step parameters.
          type: object
        title:
          description: Title for the step. Overrides the default title.
          type: string
      required:
      - id
      type: object
    PipelineStepParamBinding:
      example:
        bind: bind
        constant: constant
        description: description
        default_value: default_value
      properties:
        bind:
          description: Bind the step parameter to a pipeline variable.
          type: string
        constant:
          description: Bind the step parameter to a constant value.
          type: string
        default_value:
          description: |-
            Set a default value for the step parameter.

            This allows you to set a default value for the step parameter when it
            is not bound to a pipeline variable.
          type: string
        description:
          description: Set the description of the step parameter.
          type: string
      type: object
    PipelineType:
      default: TYPE_UNSPECIFIED
      description: |2-
         - TYPE_UNSPECIFIED: Pipeline type not specified.
         - RECORD: Record pipeline.
         - QUERY: Query pipeline.
      enum:
      - TYPE_UNSPECIFIED
      - RECORD
      - QUERY
      type: string
    Promotion:
      description: |-
        Promotion contains a trigger, determining which searches it should be active
        for, and a list of alterations that should be made to search results when it
        is active.
      example:
        filter_boosts:
        - filter: filter
          boost: 0.8008282
        - filter: filter
          boost: 0.8008282
        create_time: 2000-01-23T04:56:07.000+00:00
        end_time: 2000-01-23T04:56:07.000+00:00
        exclusions:
        - key:
            field: field
            value: value
        - key:
            field: field
            value: value
        pins:
        - position: 6
          key:
            field: field
            value: value
        - position: 6
          key:
            field: field
            value: value
        display_name: display_name
        collection_id: collection_id
        start_time: 2000-01-23T04:56:07.000+00:00
        condition: condition
        update_time: 2000-01-23T04:56:07.000+00:00
        disabled: true
        id: id
        filter_conditions:
        - filter:
          - filter
          - filter
        - filter:
          - filter
          - filter
        range_boosts:
        - null_boost: 5.637377
          field: field
          start: 2.302136
          boost: 1.4658129
          end: 5.962134
        - null_boost: 5.637377
          field: field
          start: 2.302136
          boost: 1.4658129
          end: 5.962134
      properties:
        collection_id:
          description: Output only. The ID of the collection that owns this promotion.
          readOnly: true
          type: string
        condition:
          description: |-
            A condition expression applied to a search request that determines which
            searches the promotion is active for.

            For example, to apply the promotion's pins and boosts whenever a user
            searches for 'shoes' set condition to `q = 'shoes'`.
          type: string
        create_time:
          description: Output only. Time the promotion was created.
          format: date-time
          readOnly: true
          type: string
        disabled:
          description: If disabled, the promotion is never triggered.
          type: boolean
        display_name:
          description: The promotion's display name.
          type: string
        end_time:
          description: If specified, the promotion is considered disabled after this
            time.
          format: date-time
          type: string
        exclusions:
          description: The records to exclude from search results, if the promotion
            is enabled.
          items:
            $ref: '#/components/schemas/PromotionExclusion'
          type: array
        filter_boosts:
          description: The filter boosts to apply to searches, if the promotion is
            enabled.
          items:
            $ref: '#/components/schemas/PromotionFilterBoost'
          type: array
        filter_conditions:
          description: |-
            The conditions applied to the filters passed from the user. A query must
            match at least one of these in order to trigger the promotion.
          items:
            $ref: '#/components/schemas/PromotionFilterCondition'
          type: array
        id:
          description: The promotion's ID.
          type: string
        pins:
          description: The items to fix to specific positions in the search results.
          items:
            $ref: '#/components/schemas/PromotionPin'
          type: array
        range_boosts:
          description: The range boosts to apply to searches, if the promotion is
            enabled.
          items:
            $ref: '#/components/schemas/PromotionRangeBoost'
          type: array
        start_time:
          description: If specified, the promotion is considered disabled before this
            time.
          format: date-time
          type: string
        update_time:
          description: Output only. Time the promotion was last updated.
          format: date-time
          readOnly: true
          type: string
      required:
      - condition
      - display_name
      type: object
    PromotionExclusion:
      example:
        key:
          field: field
          value: value
      properties:
        key:
          $ref: '#/components/schemas/RecordKey'
      type: object
    PromotionFilterBoost:
      example:
        filter: filter
        boost: 0.8008282
      properties:
        boost:
          description: |-
            Number that determines the size of the boost that is applied to matching
            records.

            Must be greater than or equal to 0 and less than or equal to 1.
          format: float
          type: number
        filter:
          description: |-
            Filter expression that applies a relevance boost to records matching this
            filter.

            This is a filter expression much like the query filter expression.
          type: string
      type: object
    PromotionFilterCondition:
      description: |-
        A set of filters of the form `field = 'value'`. Matches a query if the set of
        filters in the condition matches exactly the set of filters associated with
        it.
      example:
        filter:
        - filter
        - filter
      properties:
        filter:
          description: A filter of the form `field = 'value'`.
          items:
            type: string
          type: array
      type: object
    PromotionPin:
      example:
        position: 6
        key:
          field: field
          value: value
      properties:
        key:
          $ref: '#/components/schemas/RecordKey'
        position:
          description: |-
            Position the record should occupy in search results. The top position is
            position 1.

            Doesn't need to be contiguous with other pins, i.e. there can be gaps in
            the pinned set that are filled with organic results.

            In the case where there are insufficient search results pinned items are
            collapsed.
          format: int32
          type: integer
      type: object
    PromotionRangeBoost:
      example:
        null_boost: 5.637377
        field: field
        start: 2.302136
        boost: 1.4658129
        end: 5.962134
      properties:
        boost:
          description: |-
            Number that determines the size of the boost that is applied to matching
            records.
            Must be greater than or equal to 0 and less than or equal to 1.
          format: float
          type: number
        end:
          description: The end value to apply 1 boost to.
          format: float
          type: number
        field:
          description: The field to apply the boost to.
          type: string
        null_boost:
          description: |-
            The boost given to null/empty values.
            Must be greater than or equal to 0 and less than or equal to 1.
            The default value is 0.
          format: float
          type: number
        start:
          description: The start value to apply 0 boost to.
          format: float
          type: number
      type: object
    QueryAggregateResult:
      description: A query aggregate result contains results of aggregations.
      example:
        date:
          dates:
            key: 9
        percentile:
          percentiles:
          - value: 4.145608029883936
            point: 2.027123023002322
          - value: 4.145608029883936
            point: 2.027123023002322
          cdf:
          - value: 4.145608029883936
            point: 2.027123023002322
          - value: 4.145608029883936
            point: 2.027123023002322
        metric:
          value: 3.616076749251911
        buckets:
          buckets:
            key:
              count: 2
              name: name
        count:
          counts:
            key: 7
        analysis:
          coverage: 1
          avg_length: 0.8008282
          min_length: 5
          cardinality: 6
          max_length: 5
      properties:
        analysis:
          $ref: '#/components/schemas/QueryAggregateResultAnalysis'
        buckets:
          $ref: '#/components/schemas/QueryAggregateResultBuckets'
        count:
          $ref: '#/components/schemas/QueryAggregateResultCount'
        date:
          $ref: '#/components/schemas/QueryAggregateResultDate'
        metric:
          $ref: '#/components/schemas/QueryAggregateResultMetric'
        percentile:
          $ref: '#/components/schemas/QueryAggregateResultPercentile'
      type: object
    QueryAggregateResultAnalysis:
      example:
        coverage: 1
        avg_length: 0.8008282
        min_length: 5
        cardinality: 6
        max_length: 5
      properties:
        avg_length:
          description: Average number of items in an array field.
          format: float
          type: number
        cardinality:
          description: Cardinality is the number of different values in a field.
          format: int32
          type: integer
        coverage:
          description: Coverage is the number of records which have a value set.
          format: int32
          type: integer
        max_length:
          description: Maximum number of values in an array field.
          format: int32
          type: integer
        min_length:
          description: Minimum length of an array field.
          format: int32
          type: integer
      type: object
    QueryAggregateResultBuckets:
      description: Buckets is a full set of buckets computed in an aggregation.
      example:
        buckets:
          key:
            count: 2
            name: name
      properties:
        buckets:
          additionalProperties:
            $ref: '#/components/schemas/QueryAggregateResultBucketsBucket'
          type: object
      type: object
    QueryAggregateResultBucketsBucket:
      description: Bucket is the result of a bucket aggregate.
      example:
        count: 2
        name: name
      properties:
        count:
          description: Number of records in the bucket.
          format: int32
          type: integer
        name:
          description: Name of bucket.
          type: string
      type: object
    QueryAggregateResultCount:
      description: Count contains the counts for the set of values returned.
      example:
        counts:
          key: 7
      properties:
        counts:
          additionalProperties:
            format: int32
            type: integer
          type: object
      type: object
    QueryAggregateResultDate:
      example:
        dates:
          key: 9
      properties:
        dates:
          additionalProperties:
            format: int32
            type: integer
          type: object
      type: object
    QueryAggregateResultMetric:
      description: |-
        Metric represents the metric type requested, represented by an
        Enumeration Type.
      example:
        value: 3.616076749251911
      properties:
        value:
          format: double
          type: number
      type: object
    QueryAggregateResultPercentile:
      description: |-
        Percentile contains the data points returned in a percentile aggregate
        step.
      example:
        percentiles:
        - value: 4.145608029883936
          point: 2.027123023002322
        - value: 4.145608029883936
          point: 2.027123023002322
        cdf:
        - value: 4.145608029883936
          point: 2.027123023002322
        - value: 4.145608029883936
          point: 2.027123023002322
      properties:
        cdf:
          description: The cumulative distribution function (CDF) data points.
          items:
            $ref: '#/components/schemas/PercentileDataPoint'
          type: array
        percentiles:
          description: The percentile data points.
          items:
            $ref: '#/components/schemas/PercentileDataPoint'
          type: array
      type: object
    QueryCollectionRequest:
      description: A request to perform a search using a pipeline.
      example:
        pipeline:
          name: name
          version: version
        variables:
          key: '{}'
        tracking:
          sequence: 0
          data:
            key: data
          field: field
          query_id: query_id
      properties:
        pipeline:
          $ref: '#/components/schemas/QueryCollectionRequestPipeline'
        tracking:
          $ref: '#/components/schemas/QueryCollectionRequestTracking'
        variables:
          additionalProperties:
            type: object
          description: |-
            The initial values for the variables the pipeline operates on and
            transforms throughout its steps.

            The most important variable is `q` which is the query the user entered, for
            example:

            ```json
            { "q": "search terms" }
            ```

            To paginate through results, set the variables `page` and `resultsPerPage`,
            for example:

            ```json
            { "q": "search terms", "page": 5, "resultsPerPage": 20 }
            ```

            To sort results, set the variable `sort` to the name of one of your
            collection's schema fields, for example:

            ```json
            { "q": "search terms", "sort": "name" }
            ```

            To sort in reverse, prefix the schema field with a minus sign `-`, for
            example:

            ```json
            { "q": "search terms", "sort": "-name" }
            ```
          type: object
      required:
      - variables
      type: object
    QueryCollectionRequestPipeline:
      description: |-
        The pipeline to use when querying the collection.

        If not provided the default query pipeline is used.
      example:
        name: name
        version: version
      properties:
        name:
          description: The query pipeline's name, e.g. `my-pipeline`.
          type: string
        version:
          description: |-
            The query pipeline's version, e.g. `42`.

            If not provided the default version is used.
          type: string
      required:
      - name
      type: object
    QueryCollectionRequestTracking:
      example:
        sequence: 0
        data:
          key: data
        field: field
        query_id: query_id
      properties:
        data:
          additionalProperties:
            type: string
          description: Custom values to be included in tracking data.
          type: object
        field:
          description: |-
            Tracking field used to identify records in the collection.

            Must be unique schema field.
          type: string
        query_id:
          description: Query ID of the query. If this is empty, then one is generated.
          type: string
        sequence:
          description: Sequence number of query.
          format: int32
          type: integer
        type:
          $ref: '#/components/schemas/QueryCollectionRequestTrackingType'
      type: object
    QueryCollectionRequestTrackingType:
      default: TYPE_UNSPECIFIED
      description: |2-
         - TYPE_UNSPECIFIED: The default / unset value.
        The API defaults to `NONE` tracking.
         - NONE: No tracking.
         - CLICK: Click tracking.

        A click token is be generated for each result. Results which do not
        receive clicks fall down the rankings, and similarly low-ranked
        records which receive clicks are moved up the rankings.
         - POS_NEG: Pos/neg tracking.

        Pos/neg tokens are generated for each result. Each record in the result
        set can be marked with pos/neg value for the search. This is then fed
        back into the ranking algorithm to improve future results. Unlike
        `CLICK`, if no tokens are reported for records then no action is taken.
      enum:
      - TYPE_UNSPECIFIED
      - NONE
      - CLICK
      - POS_NEG
      type: string
    QueryCollectionResponse:
      example:
        pipeline:
          name: name
          version: version
        variables:
          key: '{}'
        feature_score_weight: 7.386281948385884
        redirects:
          key:
            id: id
            target: target
            token: token
        processing_duration: processing_duration
        aggregate_filters:
          key:
            date:
              dates:
                key: 9
            percentile:
              percentiles:
              - value: 4.145608029883936
                point: 2.027123023002322
              - value: 4.145608029883936
                point: 2.027123023002322
              cdf:
              - value: 4.145608029883936
                point: 2.027123023002322
              - value: 4.145608029883936
                point: 2.027123023002322
            metric:
              value: 3.616076749251911
            buckets:
              buckets:
                key:
                  count: 2
                  name: name
            count:
              counts:
                key: 7
            analysis:
              coverage: 1
              avg_length: 0.8008282
              min_length: 5
              cardinality: 6
              max_length: 5
        total_size: total_size
        aggregates:
          key:
            date:
              dates:
                key: 9
            percentile:
              percentiles:
              - value: 4.145608029883936
                point: 2.027123023002322
              - value: 4.145608029883936
                point: 2.027123023002322
              cdf:
              - value: 4.145608029883936
                point: 2.027123023002322
              - value: 4.145608029883936
                point: 2.027123023002322
            metric:
              value: 3.616076749251911
            buckets:
              buckets:
                key:
                  count: 2
                  name: name
            count:
              counts:
                key: 7
            analysis:
              coverage: 1
              avg_length: 0.8008282
              min_length: 5
              cardinality: 6
              max_length: 5
        active_promotions:
        - active_pins:
          - position: 6
            key:
              field: field
              value: value
          - position: 6
            key:
              field: field
              value: value
          promotion_id: promotion_id
          active_exclusions:
          - key:
              field: field
              value: value
          - key:
              field: field
              value: value
        - active_pins:
          - position: 6
            key:
              field: field
              value: value
          - position: 6
            key:
              field: field
              value: value
          promotion_id: promotion_id
          active_exclusions:
          - key:
              field: field
              value: value
          - key:
              field: field
              value: value
        results:
        - score: 6.84685269835264
          feature_score: 1.2315135367772556
          record: '{}'
          index_score: 1.0246457001441578
          neural_score: 1.4894159098541704
          token:
            pos_neg:
              neg: neg
              pos: pos
            click:
              token: token
        - score: 6.84685269835264
          feature_score: 1.2315135367772556
          record: '{}'
          index_score: 1.0246457001441578
          neural_score: 1.4894159098541704
          token:
            pos_neg:
              neg: neg
              pos: pos
            click:
              token: token
      properties:
        active_promotions:
          description: A list of the promotions activated when running the query.
          items:
            $ref: '#/components/schemas/ActivePromotion'
          type: array
        aggregate_filters:
          additionalProperties:
            $ref: '#/components/schemas/QueryAggregateResult'
          description: The aggregates run with filters.
          type: object
        aggregates:
          additionalProperties:
            $ref: '#/components/schemas/QueryAggregateResult'
          description: The aggregates returned by the query.
          type: object
        feature_score_weight:
          description: |-
            The weight applied to the features in the query, used for analyzing the
            index, neural and feature components for results.

            For each result:

            ```
            score = max(index_score, neural_score) * (1 - feature_score_weight) +
                    feature_score * feature_score_weight
            ```
          format: double
          type: number
        pipeline:
          $ref: '#/components/schemas/QueryCollectionResponsePipeline'
        processing_duration:
          description: The total time taken to perform the query.
          type: string
        redirects:
          additionalProperties:
            $ref: '#/components/schemas/RedirectResult'
          description: A mapping of redirects triggered for all possible variations
            of the query.
          type: object
        results:
          description: The results returned by the query.
          items:
            $ref: '#/components/schemas/QueryResult'
          type: array
        total_size:
          description: The total number of results that match the query.
          format: int64
          type: string
        variables:
          additionalProperties:
            type: object
          description: |-
            The modified variables returned by the pipeline after it has finished
            processing.
          type: object
      type: object
    QueryCollectionResponsePipeline:
      description: The resolved query pipeline that was used to run the query.
      example:
        name: name
        version: version
      properties:
        name:
          description: The pipeline's name, e.g. `my-pipeline`.
          type: string
        version:
          description: The pipeline's version, e.g. `42`.
          type: string
      type: object
    QueryResult:
      example:
        score: 6.84685269835264
        feature_score: 1.2315135367772556
        record: '{}'
        index_score: 1.0246457001441578
        neural_score: 1.4894159098541704
        token:
          pos_neg:
            neg: neg
            pos: pos
          click:
            token: token
      properties:
        feature_score:
          description: |-
            The feature score of the result.

            This is a value between 0 and 1 representing the business-specific ranking
            of the result as determined by the ranking adjustments. See [Ranking
            adjustments](https://docs.search.io/documentation/fundamentals/search-settings/ranking-adjustments)
            for more information.
          format: double
          type: number
        index_score:
          description: |-
            The index score of the result.

            This is a value between 0 and 1 representing the relevance of the result
            using traditional keyword search. The higher the score the more relevant
            the result is.
          format: double
          type: number
        neural_score:
          description: |-
            The neural score of the result.

            This is a value between 0 and 1 representing the relevance of the result
            using Neuralsearch®, using AI-based search.
          format: double
          type: number
        record:
          description: An object made up of field-value pairs that contains the record
            data.
          type: object
        score:
          description: |-
            The overall relevance of the result.

            This is a value between 0 and 1 that combines the index, neural and feature
            scores. The higher the score the more relevant the result is.
          format: double
          type: number
        token:
          $ref: '#/components/schemas/QueryResultToken'
      type: object
    QueryResultToken:
      description: Tokens are used to carry ranking information for query results.
      example:
        pos_neg:
          neg: neg
          pos: pos
        click:
          token: token
      properties:
        click:
          $ref: '#/components/schemas/QueryResultTokenClick'
        pos_neg:
          $ref: '#/components/schemas/QueryResultTokenPosNeg'
      type: object
    QueryResultTokenClick:
      description: |-
        Click is a token that corresponds to selecting a record from a result
        set. It is taken as an indication that this record is a good match for
        the corresponding request.
      example:
        token: token
      properties:
        token:
          type: string
      type: object
    QueryResultTokenPosNeg:
      description: |-
        PosNeg is a pair of tokens which are used to mark a record as a good/bad
        result for a request.
      example:
        neg: neg
        pos: pos
      properties:
        neg:
          type: string
        pos:
          type: string
      type: object
    RecordKey:
      example:
        field: field
        value: value
      properties:
        field:
          description: A field in your record that uniquely identifies it, e.g. `id`.
          type: string
        value:
          description: |-
            The value of `field` in your record, e.g.
            `b217a995-597c-410f-bef2-60e9f8c0aadd`.
          type: string
      required:
      - field
      - value
      type: object
    Redirect:
      description: |-
        Redirect contains a target that you can redirect users to if their search
        query matches a certain condition.
      example:
        collection_id: collection_id
        condition: condition
        update_time: 2000-01-23T04:56:07.000+00:00
        create_time: 2000-01-23T04:56:07.000+00:00
        disabled: true
        id: id
        target: target
      properties:
        collection_id:
          description: Output only. The ID of the collection that owns this redirect.
          readOnly: true
          type: string
        condition:
          description: |-
            A condition expression applied to a search request that determines whether
            a search is redirected.

            For example, to redirect if the user's query is `apples`, set condition to
            `q = 'apples'`.
          type: string
        create_time:
          description: Output only. Time the redirect was created.
          format: date-time
          readOnly: true
          type: string
        disabled:
          description: If disabled, the redirect is never triggered.
          type: boolean
        id:
          description: Output only. The redirect's ID.
          readOnly: true
          type: string
        target:
          description: |-
            The target to redirect the user to if their query matches `condition`.

            For searches performed in a browser, target is usually a URL but it can be
            any value that your integration can interpret as a redirect.

            For example, for URLs that you need to resolve at runtime, target might be
            a URL template string. For apps, target might be a unique identifier used
            to send the user to the correct view.
          type: string
        update_time:
          description: Output only. Time the redirect was last updated.
          format: date-time
          readOnly: true
          type: string
      required:
      - condition
      - target
      type: object
    RedirectResult:
      description: |-
        RedirectResult indicates that a redirect has been triggered for a given
        query.
      example:
        id: id
        target: target
        token: token
      properties:
        id:
          description: The redirect's ID.
          type: string
        target:
          description: The target to redirect the user to.
          type: string
        token:
          description: |-
            A redirect token.

            Call SendEvent with this token to indicate that a redirect has been
            performed.
          type: string
      type: object
    SchemaField:
      description: SchemaField defines the properties of a field in the schema.
      example:
        array: true
        name: name
        description: description
        array_length: 0
      properties:
        array:
          description: |-
            Array indicates if the field is an array of values.

            For example, if `type` is string and `array` is `true`, then the field is
            an array of strings.
          type: boolean
        array_length:
          description: |-
            The required length of the array, if `array` is `true`.

            This allows you to enforce that an array contains an exact number of items.

            For example, to store a 2x2 vector, you could set `type` to float, `array`
            to `true` and `array_length` to `4`.
          format: int32
          type: integer
        description:
          description: The description of the field.
          type: string
        mode:
          $ref: '#/components/schemas/SchemaFieldMode'
        name:
          description: The name of the field.
          type: string
        type:
          $ref: '#/components/schemas/SchemaFieldType'
      required:
      - mode
      - name
      - type
      type: object
    SchemaFieldMode:
      default: MODE_UNSPECIFIED
      description: |-
        Mode is an enumeration of modes for a field.

         - MODE_UNSPECIFIED: Mode not specified.
         - NULLABLE: Nullable fields do not need to be specified.
         - REQUIRED: Required fields must be specified and cannot be null.
         - UNIQUE: Unique fields must be specified and must be unique.
      enum:
      - MODE_UNSPECIFIED
      - NULLABLE
      - REQUIRED
      - UNIQUE
      type: string
    SchemaFieldType:
      default: TYPE_UNSPECIFIED
      description: |-
        Type represents the underlying data type of the field.

         - TYPE_UNSPECIFIED: Type not specified.
         - STRING: String values.
         - INTEGER: Integer values (64-bit).
         - FLOAT: Floating point values (32-bit).
         - DOUBLE: Double floating point values (64-bit).
         - BOOLEAN: Boolean values.
         - TIMESTAMP: Timestamp values.
      enum:
      - TYPE_UNSPECIFIED
      - STRING
      - INTEGER
      - FLOAT
      - DOUBLE
      - BOOLEAN
      - TIMESTAMP
      type: string
    SendEventRequest:
      description: |-
        A request to send an event to the ranking system after a user interacts with
        a search result.
      example:
        metadata:
          key: '{}'
        name: name
        weight: 0
        token: token
      properties:
        metadata:
          additionalProperties:
            type: object
          description: |-
            An object made up of field-value pairs that contains additional metadata to
            record with the event.

            Every value in the object must be one of the following primitive types:

            - boolean
            - number
            - string
          type: object
        name:
          description: The name of event, e.g. `click`, `purchase`.
          type: string
        token:
          description: |-
            The token corresponding to the search result that was interacted with, e.g.
            `eyJ...`.
          type: string
        weight:
          description: |-
            The weight assigned to the event.

            Generally a sensible weight is 1. If you want to weight an event in a
            certain way you can use a value other than 1. For example, if you want to
            capture profit in an event, you could set the weight to a value that
            represents the profit.
          format: int32
          type: integer
      required:
      - name
      - token
      type: object
    SendEventResponse:
      type: object
    SetDefaultPipelineRequest:
      example:
        pipeline: pipeline
      properties:
        pipeline:
          description: The name of the pipeline to use when not otherwise specified.
          type: string
        type:
          $ref: '#/components/schemas/PipelineType'
      required:
      - pipeline
      - type
      type: object
    SetDefaultPipelineResponse:
      type: object
    SetDefaultVersionRequest:
      example:
        version: version
      properties:
        version:
          description: The version to use as a default for this pipeline, e.g. `42`.
          type: string
      required:
      - version
      type: object
    SetDefaultVersionResponse:
      type: object
    Status:
      description: |-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It is
        used by [gRPC](https://github.com/grpc). Each `Status` message contains
        three pieces of data: error code, error message, and error details.

        You can find out more about this error model and how to work with it in the
        [API Design Guide](https://cloud.google.com/apis/design/errors).
      example:
        code: 6
        details:
        - value: value
          type_url: type_url
        - value: value
          type_url: type_url
        message: message
      properties:
        code:
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
          format: int32
          type: integer
        details:
          description: |-
            A list of messages that carry the error details.  There is a common set of
            message types for APIs to use.
          items:
            $ref: '#/components/schemas/protobufAny'
          type: array
        message:
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
          type: string
      type: object
    UpdateRecordRequest:
      example:
        record:
          key: '{}'
        update_mask: update_mask
        key:
          field: field
          value: value
      properties:
        key:
          $ref: '#/components/schemas/RecordKey'
        record:
          additionalProperties:
            type: object
          description: The record to update.
          type: object
        update_mask:
          description: |-
            The list of fields to be updated, separated by a comma, e.g.
            `field1,field2`.

            For each field that you want to update, provide a corresponding value in
            the record object containing the new value.
          type: string
      required:
      - key
      - record
      - update_mask
      type: object
    UpsertRecordRequest:
      example:
        pipeline:
          name: name
          version: version
        variables:
          key: '{}'
        record: '{}'
      properties:
        pipeline:
          $ref: '#/components/schemas/UpsertRecordRequestPipeline'
        record:
          description: An object made up of field-value pairs that contains the record
            data.
          type: object
        variables:
          additionalProperties:
            type: object
          description: |-
            The initial values for the variables the pipeline operates on and
            transforms throughout its steps.
          type: object
      required:
      - record
      type: object
    UpsertRecordRequestPipeline:
      description: |-
        The pipeline to use when upserting the record.

        If not provided the default record pipeline is used.
      example:
        name: name
        version: version
      properties:
        name:
          description: The record pipeline's name, e.g. `my-pipeline`.
          type: string
        version:
          description: |-
            The record pipeline's version, e.g. `42`.

            If not provided the default version is used.
          type: string
      required:
      - name
      type: object
    UpsertRecordResponse:
      example:
        variables:
          key: '{}'
        key:
          field: field
          value: value
      properties:
        key:
          $ref: '#/components/schemas/RecordKey'
        variables:
          additionalProperties:
            type: object
          description: |-
            The modified variables returned by the pipeline after it has finished
            processing.
          type: object
      type: object
    protobufAny:
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := ptypes.MarshalAny(foo)
             ...
             foo := &pb.Foo{}
             if err := ptypes.UnmarshalAny(any, foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".


        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      example:
        value: value
        type_url: type_url
      properties:
        type_url:
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
          type: string
        value:
          description: Must be a valid serialized protocol buffer of the above specified
            type.
          format: byte
          type: string
      type: object
    protobufNullValue:
      default: NULL_VALUE
      description: |-
        `NullValue` is a singleton enumeration to represent the null value for the
        `Value` type union.

         The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
      enum:
      - NULL_VALUE
      type: string
  securitySchemes:
    BasicAuth:
      description: |-
        The Search.io API uses API keys to authenticate requests.

        You should provide either your account's API key or your collection's API key. The type of key you provide depends on the required level of access for the request you are making. To administer your account (e.g. create and delete collections) you should provide an account key. For most other requests (e.g. query collection) you should provide a collection key.

        Your API keys carry many privileges, so be sure to keep them secure. Do not share your API keys in publicly accessible areas such as GitHub, client-side code, and so forth.

        Authentication to the API is performed via [HTTP Basic Auth](http://en.wikipedia.org/wiki/Basic_access_authentication). Provide your API key ID as the basic auth username value. Provide your API key secret as the basic auth password value.

        ```$ curl https://api.search.io -u <key_id>:<key_secret>```

        You can find your account's API keys in the [Search.io Console account credentials](https://app.search.io/project/credentials) page. You can find your collection's API keys in the [Search.io Console collection credentials](https://app.search.io/collection/credentials) page.

        All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Calls made over plain HTTP fail. API requests without authentication also fail.
      scheme: basic
      type: http
