/*
 * Search.io API
 *
 * Search.io is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4
 * Contact: support@search.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateRecordRequest struct for UpdateRecordRequest
type UpdateRecordRequest struct {
	Key RecordKey `json:"key"`
	// The record to update.
	Record map[string]map[string]interface{} `json:"record"`
	// The list of fields to be updated, separated by a comma, e.g. `field1,field2`.  For each field that you want to update, provide a corresponding value in the record object containing the new value.
	UpdateMask string `json:"update_mask"`
}

// NewUpdateRecordRequest instantiates a new UpdateRecordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRecordRequest(key RecordKey, record map[string]map[string]interface{}, updateMask string) *UpdateRecordRequest {
	this := UpdateRecordRequest{}
	this.Key = key
	this.Record = record
	this.UpdateMask = updateMask
	return &this
}

// NewUpdateRecordRequestWithDefaults instantiates a new UpdateRecordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRecordRequestWithDefaults() *UpdateRecordRequest {
	this := UpdateRecordRequest{}
	return &this
}

// GetKey returns the Key field value
func (o *UpdateRecordRequest) GetKey() RecordKey {
	if o == nil {
		var ret RecordKey
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *UpdateRecordRequest) GetKeyOk() (*RecordKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *UpdateRecordRequest) SetKey(v RecordKey) {
	o.Key = v
}

// GetRecord returns the Record field value
func (o *UpdateRecordRequest) GetRecord() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Record
}

// GetRecordOk returns a tuple with the Record field value
// and a boolean to check if the value has been set.
func (o *UpdateRecordRequest) GetRecordOk() (*map[string]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Record, true
}

// SetRecord sets field value
func (o *UpdateRecordRequest) SetRecord(v map[string]map[string]interface{}) {
	o.Record = v
}

// GetUpdateMask returns the UpdateMask field value
func (o *UpdateRecordRequest) GetUpdateMask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdateMask
}

// GetUpdateMaskOk returns a tuple with the UpdateMask field value
// and a boolean to check if the value has been set.
func (o *UpdateRecordRequest) GetUpdateMaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateMask, true
}

// SetUpdateMask sets field value
func (o *UpdateRecordRequest) SetUpdateMask(v string) {
	o.UpdateMask = v
}

func (o UpdateRecordRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["record"] = o.Record
	}
	if true {
		toSerialize["update_mask"] = o.UpdateMask
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateRecordRequest struct {
	value *UpdateRecordRequest
	isSet bool
}

func (v NullableUpdateRecordRequest) Get() *UpdateRecordRequest {
	return v.value
}

func (v *NullableUpdateRecordRequest) Set(val *UpdateRecordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecordRequest(val *UpdateRecordRequest) *NullableUpdateRecordRequest {
	return &NullableUpdateRecordRequest{value: val, isSet: true}
}

func (v NullableUpdateRecordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
