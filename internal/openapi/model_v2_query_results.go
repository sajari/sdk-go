/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4beta1
 * Contact: support@sajari.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2QueryResults QueryResults contains all data in response to a search request.
type V2QueryResults struct {
	// Number of reverse indexes read during the search request.
	Reads *string `json:"reads,omitempty"`
	// Total number of results.
	TotalResults *string `json:"total_results,omitempty"`
	// Time taken to perform query.
	Latency *string `json:"latency,omitempty"`
	// Aggregates returned by query.
	Aggregates *map[string]V2QueryAggregateResult `json:"aggregates,omitempty"`
	// Aggregates run with filters.
	AggregateFilters *map[string]V2QueryAggregateResult `json:"aggregate_filters,omitempty"`
	// Results returned by query.
	Results *[]V2QueryResult `json:"results,omitempty"`
}

// NewV2QueryResults instantiates a new V2QueryResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2QueryResults() *V2QueryResults {
	this := V2QueryResults{}
	return &this
}

// NewV2QueryResultsWithDefaults instantiates a new V2QueryResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2QueryResultsWithDefaults() *V2QueryResults {
	this := V2QueryResults{}
	return &this
}

// GetReads returns the Reads field value if set, zero value otherwise.
func (o *V2QueryResults) GetReads() string {
	if o == nil || o.Reads == nil {
		var ret string
		return ret
	}
	return *o.Reads
}

// GetReadsOk returns a tuple with the Reads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2QueryResults) GetReadsOk() (*string, bool) {
	if o == nil || o.Reads == nil {
		return nil, false
	}
	return o.Reads, true
}

// HasReads returns a boolean if a field has been set.
func (o *V2QueryResults) HasReads() bool {
	if o != nil && o.Reads != nil {
		return true
	}

	return false
}

// SetReads gets a reference to the given string and assigns it to the Reads field.
func (o *V2QueryResults) SetReads(v string) {
	o.Reads = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *V2QueryResults) GetTotalResults() string {
	if o == nil || o.TotalResults == nil {
		var ret string
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2QueryResults) GetTotalResultsOk() (*string, bool) {
	if o == nil || o.TotalResults == nil {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *V2QueryResults) HasTotalResults() bool {
	if o != nil && o.TotalResults != nil {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given string and assigns it to the TotalResults field.
func (o *V2QueryResults) SetTotalResults(v string) {
	o.TotalResults = &v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *V2QueryResults) GetLatency() string {
	if o == nil || o.Latency == nil {
		var ret string
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2QueryResults) GetLatencyOk() (*string, bool) {
	if o == nil || o.Latency == nil {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *V2QueryResults) HasLatency() bool {
	if o != nil && o.Latency != nil {
		return true
	}

	return false
}

// SetLatency gets a reference to the given string and assigns it to the Latency field.
func (o *V2QueryResults) SetLatency(v string) {
	o.Latency = &v
}

// GetAggregates returns the Aggregates field value if set, zero value otherwise.
func (o *V2QueryResults) GetAggregates() map[string]V2QueryAggregateResult {
	if o == nil || o.Aggregates == nil {
		var ret map[string]V2QueryAggregateResult
		return ret
	}
	return *o.Aggregates
}

// GetAggregatesOk returns a tuple with the Aggregates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2QueryResults) GetAggregatesOk() (*map[string]V2QueryAggregateResult, bool) {
	if o == nil || o.Aggregates == nil {
		return nil, false
	}
	return o.Aggregates, true
}

// HasAggregates returns a boolean if a field has been set.
func (o *V2QueryResults) HasAggregates() bool {
	if o != nil && o.Aggregates != nil {
		return true
	}

	return false
}

// SetAggregates gets a reference to the given map[string]V2QueryAggregateResult and assigns it to the Aggregates field.
func (o *V2QueryResults) SetAggregates(v map[string]V2QueryAggregateResult) {
	o.Aggregates = &v
}

// GetAggregateFilters returns the AggregateFilters field value if set, zero value otherwise.
func (o *V2QueryResults) GetAggregateFilters() map[string]V2QueryAggregateResult {
	if o == nil || o.AggregateFilters == nil {
		var ret map[string]V2QueryAggregateResult
		return ret
	}
	return *o.AggregateFilters
}

// GetAggregateFiltersOk returns a tuple with the AggregateFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2QueryResults) GetAggregateFiltersOk() (*map[string]V2QueryAggregateResult, bool) {
	if o == nil || o.AggregateFilters == nil {
		return nil, false
	}
	return o.AggregateFilters, true
}

// HasAggregateFilters returns a boolean if a field has been set.
func (o *V2QueryResults) HasAggregateFilters() bool {
	if o != nil && o.AggregateFilters != nil {
		return true
	}

	return false
}

// SetAggregateFilters gets a reference to the given map[string]V2QueryAggregateResult and assigns it to the AggregateFilters field.
func (o *V2QueryResults) SetAggregateFilters(v map[string]V2QueryAggregateResult) {
	o.AggregateFilters = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *V2QueryResults) GetResults() []V2QueryResult {
	if o == nil || o.Results == nil {
		var ret []V2QueryResult
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2QueryResults) GetResultsOk() (*[]V2QueryResult, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *V2QueryResults) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []V2QueryResult and assigns it to the Results field.
func (o *V2QueryResults) SetResults(v []V2QueryResult) {
	o.Results = &v
}

func (o V2QueryResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reads != nil {
		toSerialize["reads"] = o.Reads
	}
	if o.TotalResults != nil {
		toSerialize["total_results"] = o.TotalResults
	}
	if o.Latency != nil {
		toSerialize["latency"] = o.Latency
	}
	if o.Aggregates != nil {
		toSerialize["aggregates"] = o.Aggregates
	}
	if o.AggregateFilters != nil {
		toSerialize["aggregate_filters"] = o.AggregateFilters
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableV2QueryResults struct {
	value *V2QueryResults
	isSet bool
}

func (v NullableV2QueryResults) Get() *V2QueryResults {
	return v.value
}

func (v *NullableV2QueryResults) Set(val *V2QueryResults) {
	v.value = val
	v.isSet = true
}

func (v NullableV2QueryResults) IsSet() bool {
	return v.isSet
}

func (v *NullableV2QueryResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2QueryResults(val *V2QueryResults) *NullableV2QueryResults {
	return &NullableV2QueryResults{value: val, isSet: true}
}

func (v NullableV2QueryResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2QueryResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
