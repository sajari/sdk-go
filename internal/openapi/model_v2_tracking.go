/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4beta1
 * Contact: support@sajari.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V2Tracking struct for V2Tracking
type V2Tracking struct {
	Type *V2TrackingType `json:"type,omitempty"`
	// Query ID of the query.  If this is empty, then one is generated.
	QueryId *string `json:"query_id,omitempty"`
	// Sequence number of query.
	Sequence *int32 `json:"sequence,omitempty"`
	// Tracking field (must be unique in the collection) used to identify records in the collection.
	Field *string `json:"field,omitempty"`
	// Custom values to be included in tracking data.
	Data *map[string]string `json:"data,omitempty"`
}

// NewV2Tracking instantiates a new V2Tracking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2Tracking() *V2Tracking {
	this := V2Tracking{}
	var type_ V2TrackingType = "NONE"
	this.Type = &type_
	return &this
}

// NewV2TrackingWithDefaults instantiates a new V2Tracking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2TrackingWithDefaults() *V2Tracking {
	this := V2Tracking{}
	var type_ V2TrackingType = "NONE"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V2Tracking) GetType() V2TrackingType {
	if o == nil || o.Type == nil {
		var ret V2TrackingType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Tracking) GetTypeOk() (*V2TrackingType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V2Tracking) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given V2TrackingType and assigns it to the Type field.
func (o *V2Tracking) SetType(v V2TrackingType) {
	o.Type = &v
}

// GetQueryId returns the QueryId field value if set, zero value otherwise.
func (o *V2Tracking) GetQueryId() string {
	if o == nil || o.QueryId == nil {
		var ret string
		return ret
	}
	return *o.QueryId
}

// GetQueryIdOk returns a tuple with the QueryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Tracking) GetQueryIdOk() (*string, bool) {
	if o == nil || o.QueryId == nil {
		return nil, false
	}
	return o.QueryId, true
}

// HasQueryId returns a boolean if a field has been set.
func (o *V2Tracking) HasQueryId() bool {
	if o != nil && o.QueryId != nil {
		return true
	}

	return false
}

// SetQueryId gets a reference to the given string and assigns it to the QueryId field.
func (o *V2Tracking) SetQueryId(v string) {
	o.QueryId = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *V2Tracking) GetSequence() int32 {
	if o == nil || o.Sequence == nil {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Tracking) GetSequenceOk() (*int32, bool) {
	if o == nil || o.Sequence == nil {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *V2Tracking) HasSequence() bool {
	if o != nil && o.Sequence != nil {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *V2Tracking) SetSequence(v int32) {
	o.Sequence = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *V2Tracking) GetField() string {
	if o == nil || o.Field == nil {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Tracking) GetFieldOk() (*string, bool) {
	if o == nil || o.Field == nil {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *V2Tracking) HasField() bool {
	if o != nil && o.Field != nil {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *V2Tracking) SetField(v string) {
	o.Field = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *V2Tracking) GetData() map[string]string {
	if o == nil || o.Data == nil {
		var ret map[string]string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Tracking) GetDataOk() (*map[string]string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *V2Tracking) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]string and assigns it to the Data field.
func (o *V2Tracking) SetData(v map[string]string) {
	o.Data = &v
}

func (o V2Tracking) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.QueryId != nil {
		toSerialize["query_id"] = o.QueryId
	}
	if o.Sequence != nil {
		toSerialize["sequence"] = o.Sequence
	}
	if o.Field != nil {
		toSerialize["field"] = o.Field
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableV2Tracking struct {
	value *V2Tracking
	isSet bool
}

func (v NullableV2Tracking) Get() *V2Tracking {
	return v.value
}

func (v *NullableV2Tracking) Set(val *V2Tracking) {
	v.value = val
	v.isSet = true
}

func (v NullableV2Tracking) IsSet() bool {
	return v.isSet
}

func (v *NullableV2Tracking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2Tracking(val *V2Tracking) *NullableV2Tracking {
	return &NullableV2Tracking{value: val, isSet: true}
}

func (v NullableV2Tracking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2Tracking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
