/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4
 * Contact: support@sajari.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProtobufNullValue `NullValue` is a singleton enumeration to represent the null value for the `Value` type union.   The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
type ProtobufNullValue string

// List of protobufNullValue
const (
	PROTOBUFNULLVALUE_NULL_VALUE ProtobufNullValue = "NULL_VALUE"
)

func (v *ProtobufNullValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtobufNullValue(value)
	for _, existing := range []ProtobufNullValue{"NULL_VALUE"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtobufNullValue", value)
}

// Ptr returns reference to protobufNullValue value
func (v ProtobufNullValue) Ptr() *ProtobufNullValue {
	return &v
}

type NullableProtobufNullValue struct {
	value *ProtobufNullValue
	isSet bool
}

func (v NullableProtobufNullValue) Get() *ProtobufNullValue {
	return v.value
}

func (v *NullableProtobufNullValue) Set(val *ProtobufNullValue) {
	v.value = val
	v.isSet = true
}

func (v NullableProtobufNullValue) IsSet() bool {
	return v.isSet
}

func (v *NullableProtobufNullValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtobufNullValue(val *ProtobufNullValue) *NullableProtobufNullValue {
	return &NullableProtobufNullValue{value: val, isSet: true}
}

func (v NullableProtobufNullValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtobufNullValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
