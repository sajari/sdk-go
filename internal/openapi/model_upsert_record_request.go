/*
 * Search.io API
 *
 * Search.io is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4
 * Contact: support@search.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpsertRecordRequest struct for UpsertRecordRequest
type UpsertRecordRequest struct {
	Pipeline *UpsertRecordRequestPipeline `json:"pipeline,omitempty"`
	// An object made up of field-value pairs that contains the record data.
	Record map[string]interface{} `json:"record"`
	// The initial values for the variables the pipeline operates on and transforms throughout its steps.
	Variables *map[string]map[string]interface{} `json:"variables,omitempty"`
}

// NewUpsertRecordRequest instantiates a new UpsertRecordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertRecordRequest(record map[string]interface{}) *UpsertRecordRequest {
	this := UpsertRecordRequest{}
	this.Record = record
	return &this
}

// NewUpsertRecordRequestWithDefaults instantiates a new UpsertRecordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertRecordRequestWithDefaults() *UpsertRecordRequest {
	this := UpsertRecordRequest{}
	return &this
}

// GetPipeline returns the Pipeline field value if set, zero value otherwise.
func (o *UpsertRecordRequest) GetPipeline() UpsertRecordRequestPipeline {
	if o == nil || o.Pipeline == nil {
		var ret UpsertRecordRequestPipeline
		return ret
	}
	return *o.Pipeline
}

// GetPipelineOk returns a tuple with the Pipeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertRecordRequest) GetPipelineOk() (*UpsertRecordRequestPipeline, bool) {
	if o == nil || o.Pipeline == nil {
		return nil, false
	}
	return o.Pipeline, true
}

// HasPipeline returns a boolean if a field has been set.
func (o *UpsertRecordRequest) HasPipeline() bool {
	if o != nil && o.Pipeline != nil {
		return true
	}

	return false
}

// SetPipeline gets a reference to the given UpsertRecordRequestPipeline and assigns it to the Pipeline field.
func (o *UpsertRecordRequest) SetPipeline(v UpsertRecordRequestPipeline) {
	o.Pipeline = &v
}

// GetRecord returns the Record field value
func (o *UpsertRecordRequest) GetRecord() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Record
}

// GetRecordOk returns a tuple with the Record field value
// and a boolean to check if the value has been set.
func (o *UpsertRecordRequest) GetRecordOk() (*map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Record, true
}

// SetRecord sets field value
func (o *UpsertRecordRequest) SetRecord(v map[string]interface{}) {
	o.Record = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *UpsertRecordRequest) GetVariables() map[string]map[string]interface{} {
	if o == nil || o.Variables == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertRecordRequest) GetVariablesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Variables == nil {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *UpsertRecordRequest) HasVariables() bool {
	if o != nil && o.Variables != nil {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]map[string]interface{} and assigns it to the Variables field.
func (o *UpsertRecordRequest) SetVariables(v map[string]map[string]interface{}) {
	o.Variables = &v
}

func (o UpsertRecordRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pipeline != nil {
		toSerialize["pipeline"] = o.Pipeline
	}
	if true {
		toSerialize["record"] = o.Record
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	return json.Marshal(toSerialize)
}

type NullableUpsertRecordRequest struct {
	value *UpsertRecordRequest
	isSet bool
}

func (v NullableUpsertRecordRequest) Get() *UpsertRecordRequest {
	return v.value
}

func (v *NullableUpsertRecordRequest) Set(val *UpsertRecordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertRecordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertRecordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertRecordRequest(val *UpsertRecordRequest) *NullableUpsertRecordRequest {
	return &NullableUpsertRecordRequest{value: val, isSet: true}
}

func (v NullableUpsertRecordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertRecordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
