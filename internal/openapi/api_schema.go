/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4beta1
 * Contact: support@sajari.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// SchemaApiService SchemaApi service
type SchemaApiService service

type ApiBatchCreateSchemaFieldsRequest struct {
	ctx                                   _context.Context
	ApiService                            *SchemaApiService
	collectionId                          string
	v4beta1BatchCreateSchemaFieldsRequest *V4beta1BatchCreateSchemaFieldsRequest
}

func (r ApiBatchCreateSchemaFieldsRequest) V4beta1BatchCreateSchemaFieldsRequest(v4beta1BatchCreateSchemaFieldsRequest V4beta1BatchCreateSchemaFieldsRequest) ApiBatchCreateSchemaFieldsRequest {
	r.v4beta1BatchCreateSchemaFieldsRequest = &v4beta1BatchCreateSchemaFieldsRequest
	return r
}

func (r ApiBatchCreateSchemaFieldsRequest) Execute() (V4beta1BatchCreateSchemaFieldsResponse, *_nethttp.Response, error) {
	return r.ApiService.BatchCreateSchemaFieldsExecute(r)
}

/*
 * BatchCreateSchemaFields Batch create schema fields
 * The batch version of the
[CreateSchemaField](/docs/api-reference#operation/CreateSchemaField) call.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param collectionId The collection to create the schema fields in, e.g. `my-collection`.
 * @return ApiBatchCreateSchemaFieldsRequest
*/
func (a *SchemaApiService) BatchCreateSchemaFields(ctx _context.Context, collectionId string) ApiBatchCreateSchemaFieldsRequest {
	return ApiBatchCreateSchemaFieldsRequest{
		ApiService:   a,
		ctx:          ctx,
		collectionId: collectionId,
	}
}

/*
 * Execute executes the request
 * @return V4beta1BatchCreateSchemaFieldsResponse
 */
func (a *SchemaApiService) BatchCreateSchemaFieldsExecute(r ApiBatchCreateSchemaFieldsRequest) (V4beta1BatchCreateSchemaFieldsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V4beta1BatchCreateSchemaFieldsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SchemaApiService.BatchCreateSchemaFields")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4beta1/collections/{collection_id}/schemaFields:batchCreate"
	localVarPath = strings.Replace(localVarPath, "{"+"collection_id"+"}", _neturl.PathEscape(parameterToString(r.collectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.v4beta1BatchCreateSchemaFieldsRequest == nil {
		return localVarReturnValue, nil, reportError("v4beta1BatchCreateSchemaFieldsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v4beta1BatchCreateSchemaFieldsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GatewayruntimeError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSchemaFieldRequest struct {
	ctx                 _context.Context
	ApiService          *SchemaApiService
	collectionId        string
	v4beta1SchemaField1 *V4beta1SchemaField1
}

func (r ApiCreateSchemaFieldRequest) V4beta1SchemaField1(v4beta1SchemaField1 V4beta1SchemaField1) ApiCreateSchemaFieldRequest {
	r.v4beta1SchemaField1 = &v4beta1SchemaField1
	return r
}

func (r ApiCreateSchemaFieldRequest) Execute() (V4beta1SchemaField1, *_nethttp.Response, error) {
	return r.ApiService.CreateSchemaFieldExecute(r)
}

/*
 * CreateSchemaField Create schema field
 * Create a new field in your collection's schema.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param collectionId The collection to create a schema field in, e.g. `my-collection`.
 * @return ApiCreateSchemaFieldRequest
 */
func (a *SchemaApiService) CreateSchemaField(ctx _context.Context, collectionId string) ApiCreateSchemaFieldRequest {
	return ApiCreateSchemaFieldRequest{
		ApiService:   a,
		ctx:          ctx,
		collectionId: collectionId,
	}
}

/*
 * Execute executes the request
 * @return V4beta1SchemaField1
 */
func (a *SchemaApiService) CreateSchemaFieldExecute(r ApiCreateSchemaFieldRequest) (V4beta1SchemaField1, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V4beta1SchemaField1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SchemaApiService.CreateSchemaField")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4beta1/collections/{collection_id}/schemaFields"
	localVarPath = strings.Replace(localVarPath, "{"+"collection_id"+"}", _neturl.PathEscape(parameterToString(r.collectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.v4beta1SchemaField1 == nil {
		return localVarReturnValue, nil, reportError("v4beta1SchemaField1 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v4beta1SchemaField1
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GatewayruntimeError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSchemaFieldsRequest struct {
	ctx          _context.Context
	ApiService   *SchemaApiService
	collectionId string
	pageSize     *int32
	pageToken    *string
}

func (r ApiListSchemaFieldsRequest) PageSize(pageSize int32) ApiListSchemaFieldsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiListSchemaFieldsRequest) PageToken(pageToken string) ApiListSchemaFieldsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListSchemaFieldsRequest) Execute() (V4beta1ListSchemaFieldsResponse, *_nethttp.Response, error) {
	return r.ApiService.ListSchemaFieldsExecute(r)
}

/*
 * ListSchemaFields List schema fields
 * Retrieve a list of schema fields in the collection.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param collectionId The collection that owns this set of schema fields, e.g. `my-collection`.
 * @return ApiListSchemaFieldsRequest
 */
func (a *SchemaApiService) ListSchemaFields(ctx _context.Context, collectionId string) ApiListSchemaFieldsRequest {
	return ApiListSchemaFieldsRequest{
		ApiService:   a,
		ctx:          ctx,
		collectionId: collectionId,
	}
}

/*
 * Execute executes the request
 * @return V4beta1ListSchemaFieldsResponse
 */
func (a *SchemaApiService) ListSchemaFieldsExecute(r ApiListSchemaFieldsRequest) (V4beta1ListSchemaFieldsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V4beta1ListSchemaFieldsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SchemaApiService.ListSchemaFields")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4beta1/collections/{collection_id}/schemaFields"
	localVarPath = strings.Replace(localVarPath, "{"+"collection_id"+"}", _neturl.PathEscape(parameterToString(r.collectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GatewayruntimeError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
