/*
 * Search.io API
 *
 * Search.io is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4
 * Contact: support@search.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BatchUpsertRecordsResponseError struct for BatchUpsertRecordsResponseError
type BatchUpsertRecordsResponseError struct {
	// Index of the record in `records` that this error corresponds to.
	Index  *int32  `json:"index,omitempty"`
	Status *Status `json:"status,omitempty"`
}

// NewBatchUpsertRecordsResponseError instantiates a new BatchUpsertRecordsResponseError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchUpsertRecordsResponseError() *BatchUpsertRecordsResponseError {
	this := BatchUpsertRecordsResponseError{}
	return &this
}

// NewBatchUpsertRecordsResponseErrorWithDefaults instantiates a new BatchUpsertRecordsResponseError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchUpsertRecordsResponseErrorWithDefaults() *BatchUpsertRecordsResponseError {
	this := BatchUpsertRecordsResponseError{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *BatchUpsertRecordsResponseError) GetIndex() int32 {
	if o == nil || o.Index == nil {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchUpsertRecordsResponseError) GetIndexOk() (*int32, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *BatchUpsertRecordsResponseError) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *BatchUpsertRecordsResponseError) SetIndex(v int32) {
	o.Index = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BatchUpsertRecordsResponseError) GetStatus() Status {
	if o == nil || o.Status == nil {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchUpsertRecordsResponseError) GetStatusOk() (*Status, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BatchUpsertRecordsResponseError) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *BatchUpsertRecordsResponseError) SetStatus(v Status) {
	o.Status = &v
}

func (o BatchUpsertRecordsResponseError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableBatchUpsertRecordsResponseError struct {
	value *BatchUpsertRecordsResponseError
	isSet bool
}

func (v NullableBatchUpsertRecordsResponseError) Get() *BatchUpsertRecordsResponseError {
	return v.value
}

func (v *NullableBatchUpsertRecordsResponseError) Set(val *BatchUpsertRecordsResponseError) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchUpsertRecordsResponseError) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchUpsertRecordsResponseError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchUpsertRecordsResponseError(val *BatchUpsertRecordsResponseError) *NullableBatchUpsertRecordsResponseError {
	return &NullableBatchUpsertRecordsResponseError{value: val, isSet: true}
}

func (v NullableBatchUpsertRecordsResponseError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchUpsertRecordsResponseError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
