/*
 * Search.io API
 *
 * Search.io is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4
 * Contact: support@search.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpsertRecordResponse struct for UpsertRecordResponse
type UpsertRecordResponse struct {
	Key *RecordKey `json:"key,omitempty"`
	// The modified variables returned by the pipeline after it has finished processing.
	Variables *map[string]map[string]interface{} `json:"variables,omitempty"`
}

// NewUpsertRecordResponse instantiates a new UpsertRecordResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertRecordResponse() *UpsertRecordResponse {
	this := UpsertRecordResponse{}
	return &this
}

// NewUpsertRecordResponseWithDefaults instantiates a new UpsertRecordResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertRecordResponseWithDefaults() *UpsertRecordResponse {
	this := UpsertRecordResponse{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *UpsertRecordResponse) GetKey() RecordKey {
	if o == nil || o.Key == nil {
		var ret RecordKey
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertRecordResponse) GetKeyOk() (*RecordKey, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *UpsertRecordResponse) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given RecordKey and assigns it to the Key field.
func (o *UpsertRecordResponse) SetKey(v RecordKey) {
	o.Key = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *UpsertRecordResponse) GetVariables() map[string]map[string]interface{} {
	if o == nil || o.Variables == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertRecordResponse) GetVariablesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Variables == nil {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *UpsertRecordResponse) HasVariables() bool {
	if o != nil && o.Variables != nil {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]map[string]interface{} and assigns it to the Variables field.
func (o *UpsertRecordResponse) SetVariables(v map[string]map[string]interface{}) {
	o.Variables = &v
}

func (o UpsertRecordResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	return json.Marshal(toSerialize)
}

type NullableUpsertRecordResponse struct {
	value *UpsertRecordResponse
	isSet bool
}

func (v NullableUpsertRecordResponse) Get() *UpsertRecordResponse {
	return v.value
}

func (v *NullableUpsertRecordResponse) Set(val *UpsertRecordResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertRecordResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertRecordResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertRecordResponse(val *UpsertRecordResponse) *NullableUpsertRecordResponse {
	return &NullableUpsertRecordResponse{value: val, isSet: true}
}

func (v NullableUpsertRecordResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertRecordResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
