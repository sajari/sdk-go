/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4
 * Contact: support@sajari.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BatchUpsertRecordsResponse struct for BatchUpsertRecordsResponse
type BatchUpsertRecordsResponse struct {
	// A list of keys of the records that were inserted.  If a record was inserted, keys contains an entry containing the index of the inserted record from `records` and the key. You can use the key if you need to retrieve or delete the record.  If a record was updated, keys contains no such entry for the updated record.
	Keys *[]BatchUpsertRecordsResponseKey `json:"keys,omitempty"`
	// A list of modified variables returned by the pipeline after it has finished processing each record.
	Variables *[]BatchUpsertRecordsResponseVariables `json:"variables,omitempty"`
	// Errors that occurred.
	Errors *[]BatchUpsertRecordsResponseError `json:"errors,omitempty"`
}

// NewBatchUpsertRecordsResponse instantiates a new BatchUpsertRecordsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchUpsertRecordsResponse() *BatchUpsertRecordsResponse {
	this := BatchUpsertRecordsResponse{}
	return &this
}

// NewBatchUpsertRecordsResponseWithDefaults instantiates a new BatchUpsertRecordsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchUpsertRecordsResponseWithDefaults() *BatchUpsertRecordsResponse {
	this := BatchUpsertRecordsResponse{}
	return &this
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *BatchUpsertRecordsResponse) GetKeys() []BatchUpsertRecordsResponseKey {
	if o == nil || o.Keys == nil {
		var ret []BatchUpsertRecordsResponseKey
		return ret
	}
	return *o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchUpsertRecordsResponse) GetKeysOk() (*[]BatchUpsertRecordsResponseKey, bool) {
	if o == nil || o.Keys == nil {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *BatchUpsertRecordsResponse) HasKeys() bool {
	if o != nil && o.Keys != nil {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []BatchUpsertRecordsResponseKey and assigns it to the Keys field.
func (o *BatchUpsertRecordsResponse) SetKeys(v []BatchUpsertRecordsResponseKey) {
	o.Keys = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *BatchUpsertRecordsResponse) GetVariables() []BatchUpsertRecordsResponseVariables {
	if o == nil || o.Variables == nil {
		var ret []BatchUpsertRecordsResponseVariables
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchUpsertRecordsResponse) GetVariablesOk() (*[]BatchUpsertRecordsResponseVariables, bool) {
	if o == nil || o.Variables == nil {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *BatchUpsertRecordsResponse) HasVariables() bool {
	if o != nil && o.Variables != nil {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []BatchUpsertRecordsResponseVariables and assigns it to the Variables field.
func (o *BatchUpsertRecordsResponse) SetVariables(v []BatchUpsertRecordsResponseVariables) {
	o.Variables = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *BatchUpsertRecordsResponse) GetErrors() []BatchUpsertRecordsResponseError {
	if o == nil || o.Errors == nil {
		var ret []BatchUpsertRecordsResponseError
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchUpsertRecordsResponse) GetErrorsOk() (*[]BatchUpsertRecordsResponseError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *BatchUpsertRecordsResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []BatchUpsertRecordsResponseError and assigns it to the Errors field.
func (o *BatchUpsertRecordsResponse) SetErrors(v []BatchUpsertRecordsResponseError) {
	o.Errors = &v
}

func (o BatchUpsertRecordsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Keys != nil {
		toSerialize["keys"] = o.Keys
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableBatchUpsertRecordsResponse struct {
	value *BatchUpsertRecordsResponse
	isSet bool
}

func (v NullableBatchUpsertRecordsResponse) Get() *BatchUpsertRecordsResponse {
	return v.value
}

func (v *NullableBatchUpsertRecordsResponse) Set(val *BatchUpsertRecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchUpsertRecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchUpsertRecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchUpsertRecordsResponse(val *BatchUpsertRecordsResponse) *NullableBatchUpsertRecordsResponse {
	return &NullableBatchUpsertRecordsResponse{value: val, isSet: true}
}

func (v NullableBatchUpsertRecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchUpsertRecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
