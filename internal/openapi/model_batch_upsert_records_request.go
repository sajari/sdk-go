/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4
 * Contact: support@sajari.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BatchUpsertRecordsRequest struct for BatchUpsertRecordsRequest
type BatchUpsertRecordsRequest struct {
	Pipeline *BatchUpsertRecordsRequestPipeline `json:"pipeline,omitempty"`
	// A list of records to upsert.  A maximum of 200 records can be upsert in a batch.
	Records []map[string]interface{} `json:"records"`
	// The initial values for the variables the pipeline operates on and transforms throughout its steps.
	Variables *map[string]map[string]interface{} `json:"variables,omitempty"`
}

// NewBatchUpsertRecordsRequest instantiates a new BatchUpsertRecordsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchUpsertRecordsRequest(records []map[string]interface{}) *BatchUpsertRecordsRequest {
	this := BatchUpsertRecordsRequest{}
	this.Records = records
	return &this
}

// NewBatchUpsertRecordsRequestWithDefaults instantiates a new BatchUpsertRecordsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchUpsertRecordsRequestWithDefaults() *BatchUpsertRecordsRequest {
	this := BatchUpsertRecordsRequest{}
	return &this
}

// GetPipeline returns the Pipeline field value if set, zero value otherwise.
func (o *BatchUpsertRecordsRequest) GetPipeline() BatchUpsertRecordsRequestPipeline {
	if o == nil || o.Pipeline == nil {
		var ret BatchUpsertRecordsRequestPipeline
		return ret
	}
	return *o.Pipeline
}

// GetPipelineOk returns a tuple with the Pipeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchUpsertRecordsRequest) GetPipelineOk() (*BatchUpsertRecordsRequestPipeline, bool) {
	if o == nil || o.Pipeline == nil {
		return nil, false
	}
	return o.Pipeline, true
}

// HasPipeline returns a boolean if a field has been set.
func (o *BatchUpsertRecordsRequest) HasPipeline() bool {
	if o != nil && o.Pipeline != nil {
		return true
	}

	return false
}

// SetPipeline gets a reference to the given BatchUpsertRecordsRequestPipeline and assigns it to the Pipeline field.
func (o *BatchUpsertRecordsRequest) SetPipeline(v BatchUpsertRecordsRequestPipeline) {
	o.Pipeline = &v
}

// GetRecords returns the Records field value
func (o *BatchUpsertRecordsRequest) GetRecords() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *BatchUpsertRecordsRequest) GetRecordsOk() (*[]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Records, true
}

// SetRecords sets field value
func (o *BatchUpsertRecordsRequest) SetRecords(v []map[string]interface{}) {
	o.Records = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *BatchUpsertRecordsRequest) GetVariables() map[string]map[string]interface{} {
	if o == nil || o.Variables == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchUpsertRecordsRequest) GetVariablesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Variables == nil {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *BatchUpsertRecordsRequest) HasVariables() bool {
	if o != nil && o.Variables != nil {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]map[string]interface{} and assigns it to the Variables field.
func (o *BatchUpsertRecordsRequest) SetVariables(v map[string]map[string]interface{}) {
	o.Variables = &v
}

func (o BatchUpsertRecordsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pipeline != nil {
		toSerialize["pipeline"] = o.Pipeline
	}
	if true {
		toSerialize["records"] = o.Records
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	return json.Marshal(toSerialize)
}

type NullableBatchUpsertRecordsRequest struct {
	value *BatchUpsertRecordsRequest
	isSet bool
}

func (v NullableBatchUpsertRecordsRequest) Get() *BatchUpsertRecordsRequest {
	return v.value
}

func (v *NullableBatchUpsertRecordsRequest) Set(val *BatchUpsertRecordsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchUpsertRecordsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchUpsertRecordsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchUpsertRecordsRequest(val *BatchUpsertRecordsRequest) *NullableBatchUpsertRecordsRequest {
	return &NullableBatchUpsertRecordsRequest{value: val, isSet: true}
}

func (v NullableBatchUpsertRecordsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchUpsertRecordsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
