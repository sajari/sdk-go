/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4beta1
 * Contact: support@sajari.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TokenClick Click is a token that corresponds to selecting a record from a result set. It is taken as an indication that this record is a good match for the corresponding SearchRequest.
type TokenClick struct {
	Token *string `json:"token,omitempty"`
}

// NewTokenClick instantiates a new TokenClick object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenClick() *TokenClick {
	this := TokenClick{}
	return &this
}

// NewTokenClickWithDefaults instantiates a new TokenClick object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenClickWithDefaults() *TokenClick {
	this := TokenClick{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *TokenClick) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenClick) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *TokenClick) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *TokenClick) SetToken(v string) {
	o.Token = &v
}

func (o TokenClick) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableTokenClick struct {
	value *TokenClick
	isSet bool
}

func (v NullableTokenClick) Get() *TokenClick {
	return v.value
}

func (v *NullableTokenClick) Set(val *TokenClick) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenClick) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenClick) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenClick(val *TokenClick) *NullableTokenClick {
	return &NullableTokenClick{value: val, isSet: true}
}

func (v NullableTokenClick) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenClick) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
