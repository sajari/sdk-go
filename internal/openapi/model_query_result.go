/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4
 * Contact: support@sajari.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// QueryResult struct for QueryResult
type QueryResult struct {
	// An object made up of field-value pairs that contains the record data.
	Record *map[string]interface{} `json:"record,omitempty"`
	// The normalized score attributed to this record. Combines the index score and feature score.
	Score *float64 `json:"score,omitempty"`
	// Index score.
	IndexScore *float64          `json:"index_score,omitempty"`
	Token      *QueryResultToken `json:"token,omitempty"`
}

// NewQueryResult instantiates a new QueryResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryResult() *QueryResult {
	this := QueryResult{}
	return &this
}

// NewQueryResultWithDefaults instantiates a new QueryResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryResultWithDefaults() *QueryResult {
	this := QueryResult{}
	return &this
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *QueryResult) GetRecord() map[string]interface{} {
	if o == nil || o.Record == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryResult) GetRecordOk() (*map[string]interface{}, bool) {
	if o == nil || o.Record == nil {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *QueryResult) HasRecord() bool {
	if o != nil && o.Record != nil {
		return true
	}

	return false
}

// SetRecord gets a reference to the given map[string]interface{} and assigns it to the Record field.
func (o *QueryResult) SetRecord(v map[string]interface{}) {
	o.Record = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *QueryResult) GetScore() float64 {
	if o == nil || o.Score == nil {
		var ret float64
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryResult) GetScoreOk() (*float64, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *QueryResult) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given float64 and assigns it to the Score field.
func (o *QueryResult) SetScore(v float64) {
	o.Score = &v
}

// GetIndexScore returns the IndexScore field value if set, zero value otherwise.
func (o *QueryResult) GetIndexScore() float64 {
	if o == nil || o.IndexScore == nil {
		var ret float64
		return ret
	}
	return *o.IndexScore
}

// GetIndexScoreOk returns a tuple with the IndexScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryResult) GetIndexScoreOk() (*float64, bool) {
	if o == nil || o.IndexScore == nil {
		return nil, false
	}
	return o.IndexScore, true
}

// HasIndexScore returns a boolean if a field has been set.
func (o *QueryResult) HasIndexScore() bool {
	if o != nil && o.IndexScore != nil {
		return true
	}

	return false
}

// SetIndexScore gets a reference to the given float64 and assigns it to the IndexScore field.
func (o *QueryResult) SetIndexScore(v float64) {
	o.IndexScore = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *QueryResult) GetToken() QueryResultToken {
	if o == nil || o.Token == nil {
		var ret QueryResultToken
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryResult) GetTokenOk() (*QueryResultToken, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *QueryResult) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given QueryResultToken and assigns it to the Token field.
func (o *QueryResult) SetToken(v QueryResultToken) {
	o.Token = &v
}

func (o QueryResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Record != nil {
		toSerialize["record"] = o.Record
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	if o.IndexScore != nil {
		toSerialize["index_score"] = o.IndexScore
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableQueryResult struct {
	value *QueryResult
	isSet bool
}

func (v NullableQueryResult) Get() *QueryResult {
	return v.value
}

func (v *NullableQueryResult) Set(val *QueryResult) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryResult) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryResult(val *QueryResult) *NullableQueryResult {
	return &NullableQueryResult{value: val, isSet: true}
}

func (v NullableQueryResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
