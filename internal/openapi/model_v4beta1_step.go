/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4beta1
 * Contact: support@sajari.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V4beta1Step Step creates a pipeline step.
type V4beta1Step struct {
	// ID of the step template.
	Id string `json:"id"`
	// Title for the step. Overrides the default title.
	Title *string `json:"title,omitempty"`
	// Description for the step. Overrides the default description.
	Description *string `json:"description,omitempty"`
	// Bindings for the step parameters.
	Params *map[string]StepParamBinding `json:"params,omitempty"`
	// Condition expression to determine if the step should be run.  This is a filter expression much like the query filter expression, but it acts upon the pipeline variables.  For example, to only run the step if the pipeline `q` variable is not empty, set this to `q != ''`.
	Condition *string `json:"condition,omitempty"`
	// Annotations added to the request when the step is run.
	Annotations *[]string `json:"annotations,omitempty"`
}

// NewV4beta1Step instantiates a new V4beta1Step object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV4beta1Step(id string) *V4beta1Step {
	this := V4beta1Step{}
	this.Id = id
	return &this
}

// NewV4beta1StepWithDefaults instantiates a new V4beta1Step object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV4beta1StepWithDefaults() *V4beta1Step {
	this := V4beta1Step{}
	return &this
}

// GetId returns the Id field value
func (o *V4beta1Step) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *V4beta1Step) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *V4beta1Step) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *V4beta1Step) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V4beta1Step) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *V4beta1Step) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *V4beta1Step) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V4beta1Step) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V4beta1Step) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V4beta1Step) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V4beta1Step) SetDescription(v string) {
	o.Description = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *V4beta1Step) GetParams() map[string]StepParamBinding {
	if o == nil || o.Params == nil {
		var ret map[string]StepParamBinding
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V4beta1Step) GetParamsOk() (*map[string]StepParamBinding, bool) {
	if o == nil || o.Params == nil {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *V4beta1Step) HasParams() bool {
	if o != nil && o.Params != nil {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]StepParamBinding and assigns it to the Params field.
func (o *V4beta1Step) SetParams(v map[string]StepParamBinding) {
	o.Params = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *V4beta1Step) GetCondition() string {
	if o == nil || o.Condition == nil {
		var ret string
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V4beta1Step) GetConditionOk() (*string, bool) {
	if o == nil || o.Condition == nil {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *V4beta1Step) HasCondition() bool {
	if o != nil && o.Condition != nil {
		return true
	}

	return false
}

// SetCondition gets a reference to the given string and assigns it to the Condition field.
func (o *V4beta1Step) SetCondition(v string) {
	o.Condition = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *V4beta1Step) GetAnnotations() []string {
	if o == nil || o.Annotations == nil {
		var ret []string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V4beta1Step) GetAnnotationsOk() (*[]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *V4beta1Step) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given []string and assigns it to the Annotations field.
func (o *V4beta1Step) SetAnnotations(v []string) {
	o.Annotations = &v
}

func (o V4beta1Step) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Params != nil {
		toSerialize["params"] = o.Params
	}
	if o.Condition != nil {
		toSerialize["condition"] = o.Condition
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	return json.Marshal(toSerialize)
}

type NullableV4beta1Step struct {
	value *V4beta1Step
	isSet bool
}

func (v NullableV4beta1Step) Get() *V4beta1Step {
	return v.value
}

func (v *NullableV4beta1Step) Set(val *V4beta1Step) {
	v.value = val
	v.isSet = true
}

func (v NullableV4beta1Step) IsSet() bool {
	return v.isSet
}

func (v *NullableV4beta1Step) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV4beta1Step(val *V4beta1Step) *NullableV4beta1Step {
	return &NullableV4beta1Step{value: val, isSet: true}
}

func (v NullableV4beta1Step) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV4beta1Step) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
