/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4
 * Contact: support@sajari.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SchemaFieldMode Mode is an enumeration of modes for a field.   - MODE_UNSPECIFIED: Mode not specified.  - NULLABLE: Nullable fields do not need to be specified.  - REQUIRED: Required fields must be specified and cannot be null.  - UNIQUE: Unique fields must be specified and must be unique.
type SchemaFieldMode string

// List of SchemaFieldMode
const (
	SCHEMAFIELDMODE_MODE_UNSPECIFIED SchemaFieldMode = "MODE_UNSPECIFIED"
	SCHEMAFIELDMODE_NULLABLE         SchemaFieldMode = "NULLABLE"
	SCHEMAFIELDMODE_REQUIRED         SchemaFieldMode = "REQUIRED"
	SCHEMAFIELDMODE_UNIQUE           SchemaFieldMode = "UNIQUE"
)

func (v *SchemaFieldMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemaFieldMode(value)
	for _, existing := range []SchemaFieldMode{"MODE_UNSPECIFIED", "NULLABLE", "REQUIRED", "UNIQUE"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemaFieldMode", value)
}

// Ptr returns reference to SchemaFieldMode value
func (v SchemaFieldMode) Ptr() *SchemaFieldMode {
	return &v
}

type NullableSchemaFieldMode struct {
	value *SchemaFieldMode
	isSet bool
}

func (v NullableSchemaFieldMode) Get() *SchemaFieldMode {
	return v.value
}

func (v *NullableSchemaFieldMode) Set(val *SchemaFieldMode) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaFieldMode) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaFieldMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaFieldMode(val *SchemaFieldMode) *NullableSchemaFieldMode {
	return &NullableSchemaFieldMode{value: val, isSet: true}
}

func (v NullableSchemaFieldMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaFieldMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
