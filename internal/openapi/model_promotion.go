/*
 * Search.io API
 *
 * Search.io is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * API version: v4
 * Contact: support@search.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Promotion Promotion contains a trigger, determining which searches it should be active for, and a list of alterations that should be made to search results when it is active.
type Promotion struct {
	// Output only. The ID of the collection that owns this promotion.
	CollectionId *string `json:"collection_id,omitempty"`
	// A condition expression applied to a search request that determines which searches the promotion is active for.  For example, to apply the promotion's pins and boosts whenever a user searches for 'shoes' set condition to `q = 'shoes'`.
	Condition string `json:"condition"`
	// Output only. Time the promotion was created.
	CreateTime *time.Time `json:"create_time,omitempty"`
	// If disabled, the promotion is never triggered.
	Disabled *bool `json:"disabled,omitempty"`
	// The promotion's display name.
	DisplayName string `json:"display_name"`
	// If specified, the promotion is considered disabled after this time.
	EndTime *time.Time `json:"end_time,omitempty"`
	// The records to exclude from search results, if the promotion is enabled.
	Exclusions *[]PromotionExclusion `json:"exclusions,omitempty"`
	// The filter boosts to apply to searches, if the promotion is enabled.
	FilterBoosts *[]PromotionFilterBoost `json:"filter_boosts,omitempty"`
	// The conditions applied to the filters passed from the user. A query must match at least one of these in order to trigger the promotion.
	FilterConditions *[]PromotionFilterCondition `json:"filter_conditions,omitempty"`
	// The promotion's ID.
	Id *string `json:"id,omitempty"`
	// The items to fix to specific positions in the search results.
	Pins *[]PromotionPin `json:"pins,omitempty"`
	// The range boosts to apply to searches, if the promotion is enabled.
	RangeBoosts *[]PromotionRangeBoost `json:"range_boosts,omitempty"`
	// If specified, the promotion is considered disabled before this time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Output only. Time the promotion was last updated.
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

// NewPromotion instantiates a new Promotion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPromotion(condition string, displayName string) *Promotion {
	this := Promotion{}
	this.Condition = condition
	this.DisplayName = displayName
	return &this
}

// NewPromotionWithDefaults instantiates a new Promotion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPromotionWithDefaults() *Promotion {
	this := Promotion{}
	return &this
}

// GetCollectionId returns the CollectionId field value if set, zero value otherwise.
func (o *Promotion) GetCollectionId() string {
	if o == nil || o.CollectionId == nil {
		var ret string
		return ret
	}
	return *o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetCollectionIdOk() (*string, bool) {
	if o == nil || o.CollectionId == nil {
		return nil, false
	}
	return o.CollectionId, true
}

// HasCollectionId returns a boolean if a field has been set.
func (o *Promotion) HasCollectionId() bool {
	if o != nil && o.CollectionId != nil {
		return true
	}

	return false
}

// SetCollectionId gets a reference to the given string and assigns it to the CollectionId field.
func (o *Promotion) SetCollectionId(v string) {
	o.CollectionId = &v
}

// GetCondition returns the Condition field value
func (o *Promotion) GetCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *Promotion) GetConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *Promotion) SetCondition(v string) {
	o.Condition = v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Promotion) GetCreateTime() time.Time {
	if o == nil || o.CreateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Promotion) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *Promotion) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Promotion) GetDisabled() bool {
	if o == nil || o.Disabled == nil {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetDisabledOk() (*bool, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Promotion) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Promotion) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDisplayName returns the DisplayName field value
func (o *Promotion) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *Promotion) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *Promotion) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *Promotion) GetEndTime() time.Time {
	if o == nil || o.EndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *Promotion) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *Promotion) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetExclusions returns the Exclusions field value if set, zero value otherwise.
func (o *Promotion) GetExclusions() []PromotionExclusion {
	if o == nil || o.Exclusions == nil {
		var ret []PromotionExclusion
		return ret
	}
	return *o.Exclusions
}

// GetExclusionsOk returns a tuple with the Exclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetExclusionsOk() (*[]PromotionExclusion, bool) {
	if o == nil || o.Exclusions == nil {
		return nil, false
	}
	return o.Exclusions, true
}

// HasExclusions returns a boolean if a field has been set.
func (o *Promotion) HasExclusions() bool {
	if o != nil && o.Exclusions != nil {
		return true
	}

	return false
}

// SetExclusions gets a reference to the given []PromotionExclusion and assigns it to the Exclusions field.
func (o *Promotion) SetExclusions(v []PromotionExclusion) {
	o.Exclusions = &v
}

// GetFilterBoosts returns the FilterBoosts field value if set, zero value otherwise.
func (o *Promotion) GetFilterBoosts() []PromotionFilterBoost {
	if o == nil || o.FilterBoosts == nil {
		var ret []PromotionFilterBoost
		return ret
	}
	return *o.FilterBoosts
}

// GetFilterBoostsOk returns a tuple with the FilterBoosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetFilterBoostsOk() (*[]PromotionFilterBoost, bool) {
	if o == nil || o.FilterBoosts == nil {
		return nil, false
	}
	return o.FilterBoosts, true
}

// HasFilterBoosts returns a boolean if a field has been set.
func (o *Promotion) HasFilterBoosts() bool {
	if o != nil && o.FilterBoosts != nil {
		return true
	}

	return false
}

// SetFilterBoosts gets a reference to the given []PromotionFilterBoost and assigns it to the FilterBoosts field.
func (o *Promotion) SetFilterBoosts(v []PromotionFilterBoost) {
	o.FilterBoosts = &v
}

// GetFilterConditions returns the FilterConditions field value if set, zero value otherwise.
func (o *Promotion) GetFilterConditions() []PromotionFilterCondition {
	if o == nil || o.FilterConditions == nil {
		var ret []PromotionFilterCondition
		return ret
	}
	return *o.FilterConditions
}

// GetFilterConditionsOk returns a tuple with the FilterConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetFilterConditionsOk() (*[]PromotionFilterCondition, bool) {
	if o == nil || o.FilterConditions == nil {
		return nil, false
	}
	return o.FilterConditions, true
}

// HasFilterConditions returns a boolean if a field has been set.
func (o *Promotion) HasFilterConditions() bool {
	if o != nil && o.FilterConditions != nil {
		return true
	}

	return false
}

// SetFilterConditions gets a reference to the given []PromotionFilterCondition and assigns it to the FilterConditions field.
func (o *Promotion) SetFilterConditions(v []PromotionFilterCondition) {
	o.FilterConditions = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Promotion) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Promotion) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Promotion) SetId(v string) {
	o.Id = &v
}

// GetPins returns the Pins field value if set, zero value otherwise.
func (o *Promotion) GetPins() []PromotionPin {
	if o == nil || o.Pins == nil {
		var ret []PromotionPin
		return ret
	}
	return *o.Pins
}

// GetPinsOk returns a tuple with the Pins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetPinsOk() (*[]PromotionPin, bool) {
	if o == nil || o.Pins == nil {
		return nil, false
	}
	return o.Pins, true
}

// HasPins returns a boolean if a field has been set.
func (o *Promotion) HasPins() bool {
	if o != nil && o.Pins != nil {
		return true
	}

	return false
}

// SetPins gets a reference to the given []PromotionPin and assigns it to the Pins field.
func (o *Promotion) SetPins(v []PromotionPin) {
	o.Pins = &v
}

// GetRangeBoosts returns the RangeBoosts field value if set, zero value otherwise.
func (o *Promotion) GetRangeBoosts() []PromotionRangeBoost {
	if o == nil || o.RangeBoosts == nil {
		var ret []PromotionRangeBoost
		return ret
	}
	return *o.RangeBoosts
}

// GetRangeBoostsOk returns a tuple with the RangeBoosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetRangeBoostsOk() (*[]PromotionRangeBoost, bool) {
	if o == nil || o.RangeBoosts == nil {
		return nil, false
	}
	return o.RangeBoosts, true
}

// HasRangeBoosts returns a boolean if a field has been set.
func (o *Promotion) HasRangeBoosts() bool {
	if o != nil && o.RangeBoosts != nil {
		return true
	}

	return false
}

// SetRangeBoosts gets a reference to the given []PromotionRangeBoost and assigns it to the RangeBoosts field.
func (o *Promotion) SetRangeBoosts(v []PromotionRangeBoost) {
	o.RangeBoosts = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *Promotion) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *Promotion) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *Promotion) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *Promotion) GetUpdateTime() time.Time {
	if o == nil || o.UpdateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Promotion) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || o.UpdateTime == nil {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *Promotion) HasUpdateTime() bool {
	if o != nil && o.UpdateTime != nil {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *Promotion) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

func (o Promotion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CollectionId != nil {
		toSerialize["collection_id"] = o.CollectionId
	}
	if true {
		toSerialize["condition"] = o.Condition
	}
	if o.CreateTime != nil {
		toSerialize["create_time"] = o.CreateTime
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if true {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.EndTime != nil {
		toSerialize["end_time"] = o.EndTime
	}
	if o.Exclusions != nil {
		toSerialize["exclusions"] = o.Exclusions
	}
	if o.FilterBoosts != nil {
		toSerialize["filter_boosts"] = o.FilterBoosts
	}
	if o.FilterConditions != nil {
		toSerialize["filter_conditions"] = o.FilterConditions
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Pins != nil {
		toSerialize["pins"] = o.Pins
	}
	if o.RangeBoosts != nil {
		toSerialize["range_boosts"] = o.RangeBoosts
	}
	if o.StartTime != nil {
		toSerialize["start_time"] = o.StartTime
	}
	if o.UpdateTime != nil {
		toSerialize["update_time"] = o.UpdateTime
	}
	return json.Marshal(toSerialize)
}

type NullablePromotion struct {
	value *Promotion
	isSet bool
}

func (v NullablePromotion) Get() *Promotion {
	return v.value
}

func (v *NullablePromotion) Set(val *Promotion) {
	v.value = val
	v.isSet = true
}

func (v NullablePromotion) IsSet() bool {
	return v.isSet
}

func (v *NullablePromotion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromotion(val *Promotion) *NullablePromotion {
	return &NullablePromotion{value: val, isSet: true}
}

func (v NullablePromotion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromotion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
